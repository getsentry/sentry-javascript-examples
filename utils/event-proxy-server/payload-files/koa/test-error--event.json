[
  {
    "event_id": "[[ID1]]",
    "sent_at": "[[ISODateString]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "8.0.0-alpha.9"
    },
    "dsn": "[[dsn]]"
  },
  {
    "type": "event"
  },
  {
    "exception": {
      "values": [
        {
          "type": "Error",
          "value": "This is an error",
          "stacktrace": {
            "frames": [
              {
                "filename": "[[FILENAME1]]",
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager",
                "function": "SentryContextManager.with",
                "lineno": 33,
                "colno": 40,
                "in_app": false,
                "pre_context": [
                  "    }",
                  "    active() {",
                  "        var _a;",
                  "        return (_a = this._asyncLocalStorage.getStore()) !== null && _a !== void 0 ? _a : api_1.ROOT_CONTEXT;",
                  "    }",
                  "    with(context, fn, thisArg, ...args) {",
                  "        const cb = thisArg == null ? fn : fn.bind(thisArg);"
                ],
                "context_line": "        return this._asyncLocalStorage.run(context, cb, ...args);",
                "post_context": [
                  "    }",
                  "    enable() {",
                  "        return this;",
                  "    }",
                  "    disable() {",
                  "        this._asyncLocalStorage.disable();",
                  "        return this;"
                ]
              },
              {
                "filename": "[[FILENAME2]]",
                "module": "node:async_hooks",
                "function": "AsyncLocalStorage.run",
                "lineno": 346,
                "colno": 14,
                "in_app": false
              },
              {
                "filename": "[[FILENAME3]]",
                "module": "@opentelemetry.instrumentation-koa.build.src:instrumentation",
                "function": "?",
                "lineno": 150,
                "colno": 34,
                "in_app": false,
                "pre_context": [
                  "                        api.diag.error('koa instrumentation: request hook failed', e);",
                  "                    }",
                  "                }, true);",
                  "            }",
                  "            const newContext = api.trace.setSpan(api.context.active(), span);",
                  "            return api.context.with(newContext, async () => {",
                  "                try {"
                ],
                "context_line": "                    return await middlewareLayer(context, next);",
                "post_context": [
                  "                }",
                  "                catch (err) {",
                  "                    span.recordException(err);",
                  "                    throw err;",
                  "                }",
                  "                finally {",
                  "                    span.end();"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "?",
                "lineno": 82,
                "colno": 51,
                "in_app": true,
                "pre_context": [
                  "var koa_1 = __importDefault(require(\"koa\"));",
                  "var router_1 = __importDefault(require(\"@koa/router\"));",
                  "var router = new router_1.default();",
                  "var app = new koa_1.default();",
                  "router.get('/test-success', function (ctx) {",
                  "    ctx.body = { version: 'v1' };",
                  "});"
                ],
                "context_line": "router.get('/test-error', function (ctx) { return __awaiter(void 0, void 0, void 0, function () {",
                "post_context": [
                  "    var exceptionId;",
                  "    return __generator(this, function (_a) {",
                  "        exceptionId = Sentry.captureException(new Error('This is an error'));",
                  "        Sentry.flush(2000);",
                  "        ctx.body = { exceptionId: exceptionId };",
                  "        return [2 /*return*/];",
                  "    });"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "__awaiter",
                "lineno": 27,
                "colno": 12,
                "in_app": true,
                "pre_context": [
                  "    var result = {};",
                  "    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);",
                  "    __setModuleDefault(result, mod);",
                  "    return result;",
                  "};",
                  "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {",
                  "    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }"
                ],
                "context_line": "    return new (P || (P = Promise))(function (resolve, reject) {",
                "post_context": [
                  "        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }",
                  "        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }",
                  "        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }",
                  "        step((generator = generator.apply(thisArg, _arguments || [])).next());",
                  "    });",
                  "};",
                  "var __generator = (this && this.__generator) || function (thisArg, body) {"
                ]
              },
              {
                "filename": "[[FILENAME5]]",
                "module": "<anonymous>",
                "function": "new Promise",
                "in_app": false
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "?",
                "lineno": 31,
                "colno": 71,
                "in_app": true,
                "pre_context": [
                  "};",
                  "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {",
                  "    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }",
                  "    return new (P || (P = Promise))(function (resolve, reject) {",
                  "        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }",
                  "        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }",
                  "        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }"
                ],
                "context_line": "        step((generator = generator.apply(thisArg, _arguments || [])).next());",
                "post_context": [
                  "    });",
                  "};",
                  "var __generator = (this && this.__generator) || function (thisArg, body) {",
                  "    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;",
                  "    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { re {snip}",
                  "    function verb(n) { return function (v) { return step([n, v]); }; }",
                  "    function step(op) {"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "Object.next",
                "lineno": 37,
                "colno": 53,
                "in_app": true,
                "pre_context": [
                  "        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }",
                  "        step((generator = generator.apply(thisArg, _arguments || [])).next());",
                  "    });",
                  "};",
                  "var __generator = (this && this.__generator) || function (thisArg, body) {",
                  "    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;",
                  "    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { re {snip}"
                ],
                "context_line": "    function verb(n) { return function (v) { return step([n, v]); }; }",
                "post_context": [
                  "    function step(op) {",
                  "        if (f) throw new TypeError(\"Generator is already executing.\");",
                  "        while (g && (g = 0, op[0] && (_ = 0)), _) try {",
                  "            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.ca {snip}",
                  "            if (y = 0, t) op = [op[0] & 2, t.value];",
                  "            switch (op[0]) {",
                  "                case 0: case 1: t = op; break;"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "step",
                "lineno": 56,
                "colno": 23,
                "in_app": true,
                "pre_context": [
                  "                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }",
                  "                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }",
                  "                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }",
                  "                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }",
                  "                    if (t[2]) _.ops.pop();",
                  "                    _.trys.pop(); continue;",
                  "            }"
                ],
                "context_line": "            op = body.call(thisArg, _);",
                "post_context": [
                  "        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }",
                  "        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };",
                  "    }",
                  "};",
                  "var __importDefault = (this && this.__importDefault) || function (mod) {",
                  "    return (mod && mod.__esModule) ? mod : { \"default\": mod };",
                  "};"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "app",
                "function": "?",
                "lineno": 85,
                "colno": 47,
                "in_app": true,
                "pre_context": [
                  "var app = new koa_1.default();",
                  "router.get('/test-success', function (ctx) {",
                  "    ctx.body = { version: 'v1' };",
                  "});",
                  "router.get('/test-error', function (ctx) { return __awaiter(void 0, void 0, void 0, function () {",
                  "    var exceptionId;",
                  "    return __generator(this, function (_a) {"
                ],
                "context_line": "        exceptionId = Sentry.captureException(new Error('This is an error'));",
                "post_context": [
                  "        Sentry.flush(2000);",
                  "        ctx.body = { exceptionId: exceptionId };",
                  "        return [2 /*return*/];",
                  "    });",
                  "}); });",
                  "router.get('/test-param-success/:param', function (ctx) {",
                  "    ctx.body = { paramWas: ctx.params.param };"
                ]
              }
            ]
          },
          "mechanism": {
            "type": "generic",
            "handled": true
          }
        }
      ]
    },
    "event_id": "[[ID1]]",
    "platform": "node",
    "contexts": {
      "trace": {
        "trace_id": "[[ID2]]",
        "span_id": "[[ID3]]",
        "parent_span_id": "[[ID4]]"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "app": {
        "app_start_time": "[[ISODateString]]",
        "app_memory": "[[highNumber]]"
      },
      "os": {
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2",
        "build": "23C64"
      },
      "device": {
        "boot_time": "[[ISODateString]]",
        "arch": "arm64",
        "memory_size": "[[highNumber]]",
        "free_memory": "[[highNumber]]",
        "processor_count": 10,
        "cpu_description": "Apple M1 Pro",
        "processor_frequency": "[[highNumber]]"
      },
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "cloud_resource": {}
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "environment": "qa",
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariables",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa"
      ],
      "name": "sentry.javascript.node",
      "version": "8.0.0-alpha.9",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-alpha.9"
        }
      ]
    },
    "request": {
      "method": "GET",
      "cookies": {},
      "headers": {
        "host": "localhost:3030",
        "user-agent": "[[user-agent]]",
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-language": "en-US,en;q=0.5",
        "accept-encoding": "gzip, deflate, br",
        "connection": "keep-alive",
        "upgrade-insecure-requests": "1",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "pragma": "no-cache",
        "cache-control": "no-cache"
      },
      "url": "http://localhost:3030/test-error"
    },
    "transaction": "GET /test-error",
    "modules": {
      "semver": "7.6.0",
      "yallist": "4.0.0",
      "shimmer": "1.2.1",
      "require-in-the-middle": "7.3.0",
      "resolve": "1.22.8",
      "is-core-module": "2.13.1",
      "hasown": "2.0.2",
      "function-bind": "1.1.2",
      "debug": "4.3.4",
      "supports-color": "5.5.0",
      "module-details-from-path": "1.0.3",
      "import-in-the-middle": "1.7.3",
      "koa": "2.15.3",
      "is-generator-function": "1.0.10",
      "has-tostringtag": "1.0.2",
      "has-symbols": "1.0.3",
      "on-finished": "2.4.1",
      "ee-first": "1.1.1",
      "content-disposition": "0.5.4",
      "safe-buffer": "5.2.1",
      "cache-content-type": "1.0.1",
      "mime-types": "2.1.35",
      "mime-db": "1.52.0",
      "ylru": "1.4.0",
      "escape-html": "1.0.3",
      "type-is": "1.6.18",
      "media-typer": "0.3.0",
      "destroy": "1.2.0",
      "vary": "1.1.2",
      "only": "0.0.2",
      "encodeurl": "1.0.2",
      "koa-compose": "4.1.0",
      "setprototypeof": "1.2.0",
      "inherits": "2.0.4",
      "toidentifier": "1.0.1",
      "http-assert": "1.5.0",
      "deep-equal": "1.0.1",
      "delegates": "1.0.0",
      "cookies": "0.9.1",
      "depd": "2.0.0",
      "keygrip": "1.1.0",
      "tsscmp": "1.0.6",
      "accepts": "1.3.8",
      "negotiator": "0.6.3",
      "content-type": "1.0.5",
      "parseurl": "1.3.3",
      "fresh": "0.5.2",
      "koa-convert": "2.0.0",
      "co": "4.6.0",
      "http-errors": "2.0.0",
      "statuses": "2.0.1",
      "methods": "1.1.2",
      "opentelemetry-instrumentation-fetch-node": "1.1.2"
    }
  }
]