[
  {
    "event_id": "[[ID1]]",
    "sent_at": "[[ISODateString]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "7.109.0"
    },
    "dsn": "[[dsn]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "trace_id": "[[ID2]]",
      "sample_rate": "1",
      "transaction": "GET /test-error-manual",
      "sampled": "true"
    }
  },
  {
    "type": "event"
  },
  {
    "exception": {
      "values": [
        {
          "type": "Error",
          "value": "This is an error",
          "stacktrace": {
            "frames": [
              {
                "filename": "[[FILENAME1]]",
                "module": "@sentry.node.cjs.async:hooks",
                "function": "Object.runWithAsyncContext",
                "lineno": 41,
                "colno": 25,
                "in_app": false,
                "pre_context": [
                  "      // We're already in an async context, so we don't need to create a new one",
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  ""
                ],
                "context_line": "    return asyncStorage.run(newHub, () => {",
                "post_context": [
                  "      return callback();",
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  ""
                ]
              },
              {
                "filename": "[[FILENAME2]]",
                "module": "node:async_hooks",
                "function": "AsyncLocalStorage.run",
                "lineno": 346,
                "colno": 14,
                "in_app": false
              },
              {
                "filename": "[[FILENAME1]]",
                "module": "@sentry.node.cjs.async:hooks",
                "function": "<anonymous>",
                "lineno": 42,
                "colno": 14,
                "in_app": false,
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ],
                "context_line": "      return callback();",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ]
              },
              {
                "filename": "[[FILENAME3]]",
                "module": "@sentry.core.cjs.tracing:trace",
                "function": "<anonymous>",
                "lineno": 83,
                "colno": 22,
                "in_app": false,
                "pre_context": [
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  "",
                  "  return hub.runWithAsyncContext(() => {"
                ],
                "context_line": "    return exports$1.withScope(context.scope, scope => {",
                "post_context": [
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;",
                  "      const activeSpan = shouldSkipSpan"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "@sentry.core.cjs:exports",
                "function": "Object.withScope",
                "lineno": 170,
                "colno": 20,
                "in_app": false,
                "pre_context": [
                  "  const hub$1 = hub.getCurrentHub();",
                  "",
                  "  // If a scope is defined, we want to make this the active scope instead of the default one",
                  "  if (rest.length === 2) {",
                  "    const [scope, callback] = rest;",
                  "    if (!scope) {",
                  "      // eslint-disable-next-line deprecation/deprecation"
                ],
                "context_line": "      return hub$1.withScope(callback);",
                "post_context": [
                  "    }",
                  "",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    return hub$1.withScope(() => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      hub$1.getStackTop().scope = scope ;",
                  "      return callback(scope );"
                ]
              },
              {
                "filename": "[[FILENAME5]]",
                "module": "@sentry.core.cjs:hub",
                "function": "Hub.withScope",
                "lineno": 185,
                "colno": 28,
                "in_app": false,
                "pre_context": [
                  "   */",
                  "   withScope(callback) {",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    const scope = this.pushScope();",
                  "",
                  "    let maybePromiseResult;",
                  "    try {"
                ],
                "context_line": "      maybePromiseResult = callback(scope);",
                "post_context": [
                  "    } catch (e) {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      this.popScope();",
                  "      throw e;",
                  "    }",
                  "",
                  "    if (utils.isThenable(maybePromiseResult)) {"
                ]
              },
              {
                "filename": "[[FILENAME3]]",
                "module": "@sentry.core.cjs.tracing:trace",
                "function": "<anonymous>",
                "lineno": 99,
                "colno": 35,
                "in_app": false,
                "pre_context": [
                  "        : createChildSpanOrTransaction(hub$1, {",
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  ""
                ],
                "context_line": "      return handleCallbackErrors.handleCallbackErrors(",
                "post_context": [
                  "        () => callback(activeSpan),",
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');"
                ]
              },
              {
                "filename": "[[FILENAME6]]",
                "module": "@sentry.core.cjs.utils:handleCallbackErrors",
                "function": "Object.handleCallbackErrors",
                "lineno": 26,
                "colno": 26,
                "in_app": false,
                "pre_context": [
                  "  fn,",
                  "  onError,",
                  "  // eslint-disable-next-line @typescript-eslint/no-empty-function",
                  "  onFinally = () => {},",
                  ") {",
                  "  let maybePromiseResult;",
                  "  try {"
                ],
                "context_line": "    maybePromiseResult = fn();",
                "post_context": [
                  "  } catch (e) {",
                  "    onError(e);",
                  "    onFinally();",
                  "    throw e;",
                  "  }",
                  "",
                  "  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);"
                ]
              },
              {
                "filename": "[[FILENAME3]]",
                "module": "@sentry.core.cjs.tracing:trace",
                "function": "handleCallbackErrors.handleCallbackErrors.status.status",
                "lineno": 100,
                "colno": 15,
                "in_app": false,
                "pre_context": [
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  "",
                  "      return handleCallbackErrors.handleCallbackErrors("
                ],
                "context_line": "        () => callback(activeSpan),",
                "post_context": [
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');",
                  "            }"
                ]
              },
              {
                "filename": "[[FILENAME7]]",
                "module": "app",
                "function": "<anonymous>",
                "lineno": 145,
                "colno": 53,
                "in_app": true,
                "pre_context": [
                  "app.get('/test-error-manual', function (req, res) {",
                  "    return __awaiter(this, void 0, void 0, function () {",
                  "        return __generator(this, function (_a) {",
                  "            switch (_a.label) {",
                  "                case 0:",
                  "                    Sentry.startSpan({ name: 'test-transaction', op: 'e2e-test' }, function () {",
                  "                        Sentry.startSpan({ name: 'test-span' }, function () {"
                ],
                "context_line": "                            Sentry.captureException(new Error('This is an error'));",
                "post_context": [
                  "                        });",
                  "                    });",
                  "                    return [4 /*yield*/, Sentry.flush(2000)];",
                  "                case 1:",
                  "                    _a.sent();",
                  "                    res.send({",
                  "                        transactionIds: global.transactionIds || [],"
                ]
              }
            ]
          },
          "mechanism": {
            "type": "generic",
            "handled": true
          }
        }
      ]
    },
    "event_id": "[[ID1]]",
    "platform": "node",
    "contexts": {
      "trace": {
        "data": {
          "sentry.origin": "manual"
        },
        "parent_span_id": "[[ID3]]",
        "span_id": "[[ID4]]",
        "trace_id": "[[ID2]]",
        "origin": "manual"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "app": {
        "app_start_time": "[[ISODateString]]",
        "app_memory": "[[highNumber]]"
      },
      "os": {
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2",
        "build": "23C64"
      },
      "device": {
        "boot_time": "[[ISODateString]]",
        "arch": "arm64",
        "memory_size": "[[highNumber]]",
        "free_memory": "[[highNumber]]",
        "processor_count": 10,
        "cpu_description": "Apple M1 Pro",
        "processor_frequency": "[[highNumber]]"
      },
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "cloud_resource": {}
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "environment": "qa",
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "Undici",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariables",
        "Context",
        "Modules",
        "Express"
      ],
      "name": "sentry.javascript.node",
      "version": "7.109.0",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "7.109.0"
        }
      ]
    },
    "tags": {
      "transaction": "GET /test-error-manual"
    },
    "breadcrumbs": [
      {
        "timestamp": "[[timestamp]]",
        "category": "console",
        "level": "log",
        "message": "Example app listening on port 3030"
      }
    ],
    "request": {
      "method": "GET",
      "cookies": {},
      "headers": {
        "host": "localhost:3030",
        "user-agent": "[[user-agent]]",
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-language": "en-US,en;q=0.5",
        "accept-encoding": "gzip, deflate, br",
        "connection": "keep-alive",
        "upgrade-insecure-requests": "1",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "pragma": "no-cache",
        "cache-control": "no-cache"
      },
      "query_string": {},
      "url": "http://localhost:3030/test-error-manual"
    },
    "transaction": "GET /test-error-manual",
    "modules": {
      "express": "4.19.2",
      "body-parser": "1.20.2",
      "depd": "2.0.0",
      "merge-descriptors": "1.0.1",
      "finalhandler": "1.2.0",
      "encodeurl": "1.0.2",
      "escape-html": "1.0.3",
      "on-finished": "2.4.1",
      "ee-first": "1.1.1",
      "parseurl": "1.3.3",
      "statuses": "2.0.1",
      "unpipe": "1.0.0",
      "array-flatten": "1.1.1",
      "path-to-regexp": "0.1.7",
      "methods": "1.1.2",
      "utils-merge": "1.0.1",
      "setprototypeof": "1.2.0",
      "qs": "6.11.0",
      "side-channel": "1.0.6",
      "get-intrinsic": "1.2.4",
      "es-errors": "1.3.0",
      "has-symbols": "1.0.3",
      "has-proto": "1.0.3",
      "function-bind": "1.1.2",
      "hasown": "2.0.2",
      "call-bind": "1.0.7",
      "set-function-length": "1.2.2",
      "define-data-property": "1.1.4",
      "es-define-property": "1.0.0",
      "gopd": "1.0.1",
      "has-property-descriptors": "1.0.2",
      "object-inspect": "1.13.1",
      "safe-buffer": "5.2.1",
      "content-disposition": "0.5.4",
      "content-type": "1.0.5",
      "send": "0.18.0",
      "http-errors": "2.0.0",
      "inherits": "2.0.4",
      "toidentifier": "1.0.1",
      "destroy": "1.2.0",
      "etag": "1.8.1",
      "fresh": "0.5.2",
      "mime": "1.6.0",
      "ms": "2.1.3",
      "range-parser": "1.2.1",
      "proxy-addr": "2.0.7",
      "forwarded": "0.2.0",
      "ipaddr.js": "1.9.1",
      "accepts": "1.3.8",
      "negotiator": "0.6.3",
      "mime-types": "2.1.35",
      "mime-db": "1.52.0",
      "type-is": "1.6.18",
      "media-typer": "0.3.0",
      "cookie-signature": "1.0.6",
      "cookie": "0.6.0",
      "vary": "1.1.2",
      "bytes": "3.1.2",
      "raw-body": "2.5.2",
      "iconv-lite": "0.4.24",
      "safer-buffer": "2.1.2",
      "serve-static": "1.15.0"
    }
  }
]