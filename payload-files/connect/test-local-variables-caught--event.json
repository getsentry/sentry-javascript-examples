[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "8.0.0-beta.3"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "sample_rate": "1",
      "sampled": "true",
      "trace_id": "[[ID2]]",
      "transaction": "GET /test-local-variables-caught"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "Example app listening on port 3030",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "span_id": "[[ID3]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": true,
            "type": "generic"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 5,
                "context_line": "    call(layer.handle, route, err, req, res, next);",
                "filename": "[[FILENAME1]]",
                "function": "next",
                "in_app": false,
                "lineno": 183,
                "module": "connect:index",
                "post_context": [
                  "  }",
                  "",
                  "  next();",
                  "};",
                  "",
                  "/**",
                  " * Listen for connections."
                ],
                "pre_context": [
                  "      if (!protohost && req.url[0] !== '/') {",
                  "        req.url = '/' + req.url;",
                  "        slashAdded = true;",
                  "      }",
                  "    }",
                  "",
                  "    // call the layer handle"
                ]
              },
              {
                "colno": 7,
                "context_line": "      handle(req, res, next);",
                "filename": "[[FILENAME1]]",
                "function": "call",
                "in_app": false,
                "lineno": 239,
                "module": "connect:index",
                "post_context": [
                  "      return;",
                  "    }",
                  "  } catch (e) {",
                  "    // replace the error",
                  "    error = e;",
                  "  }",
                  ""
                ],
                "pre_context": [
                  "  try {",
                  "    if (hasError && arity === 4) {",
                  "      // error-handling middleware",
                  "      handle(err, req, res, next);",
                  "      return;",
                  "    } else if (!hasError && arity < 4) {",
                  "      // request-handling middleware"
                ]
              },
              {
                "colno": 31,
                "context_line": "            return middleWare.apply(this, arguments);",
                "filename": "[[FILENAME2]]",
                "function": "patchedMiddleware",
                "in_app": false,
                "lineno": 130,
                "module": "@opentelemetry.instrumentation-connect.build.src:instrumentation",
                "post_context": [
                  "        }",
                  "        Object.defineProperty(patchedMiddleware, 'length', {",
                  "            value: middleWare.length,",
                  "            writable: false,",
                  "            configurable: true,",
                  "        });",
                  "        return patchedMiddleware;"
                ],
                "pre_context": [
                  "                else {",
                  "                    instrumentation._diag.debug(`span ${span.name} - already finished`);",
                  "                }",
                  "                res.removeListener('close', finishSpan);",
                  "            }",
                  "            res.addListener('close', finishSpan);",
                  "            arguments[nextArgIdx] = instrumentation._patchNext(next, finishSpan);"
                ]
              },
              {
                "colno": 15,
                "context_line": "        throw new Error('Local Variable Error');",
                "filename": "[[FILENAME3]]",
                "function": "?",
                "in_app": true,
                "lineno": 171,
                "module": "app",
                "post_context": [
                  "    }",
                  "    catch (e) {",
                  "        exceptionId = Sentry.captureException(e);",
                  "    }",
                  "    res.end(stringify({ exceptionId: exceptionId, randomVariableToRecord: randomVariableToRecord }));",
                  "});",
                  "Sentry.setupConnectErrorHandler(app);"
                ],
                "pre_context": [
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "    throw new Error(\"Uncaught Local Variable Error - \".concat(stringify({ randomVariableToRecord: randomVariableToRecord })));",
                  "});",
                  "app.use('/test-local-variables-caught', function (req, res) {",
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "    var exceptionId;",
                  "    try {"
                ],
                "vars": {
                  "exceptionId": "<undefined>",
                  "randomVariableToRecord": "LOCAL VARIABLE",
                  "req": "<IncomingMessage>",
                  "res": "<ServerResponse>"
                }
              }
            ]
          },
          "type": "Error",
          "value": "Local Variable Error"
        }
      ]
    },
    "modules": {
      "connect": "3.7.0",
      "debug": "4.3.4",
      "dotenv": "16.4.5",
      "ee-first": "1.1.1",
      "encodeurl": "1.0.2",
      "escape-html": "1.0.3",
      "finalhandler": "1.1.2",
      "function-bind": "1.1.2",
      "hasown": "2.0.2",
      "import-in-the-middle": "1.7.1",
      "is-core-module": "2.13.1",
      "module-details-from-path": "1.0.3",
      "opentelemetry-instrumentation-fetch-node": "1.2.0",
      "parseurl": "1.3.3",
      "require-in-the-middle": "7.3.0",
      "resolve": "1.22.8",
      "semver": "7.6.0",
      "shimmer": "1.2.1",
      "supports-color": "5.5.0",
      "unpipe": "1.0.0",
      "utils-merge": "1.0.1",
      "yallist": "4.0.0"
    },
    "platform": "node",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "host": "localhost:3030",
        "pragma": "no-cache",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "[[user-agent]]"
      },
      "method": "GET",
      "url": "http://localhost:3030/test-local-variables-caught"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariablesAsync",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa",
        "Connect"
      ],
      "name": "sentry.javascript.node",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-beta.3"
        }
      ],
      "version": "8.0.0-beta.3"
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "transaction": "GET /test-local-variables-caught"
  }
]