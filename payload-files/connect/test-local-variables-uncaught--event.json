[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "7.110.1"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "sample_rate": "1",
      "sampled": "true",
      "trace_id": "[[ID2]]",
      "transaction": "GET /test-local-variables-uncaught"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "Example app listening on port 3030",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "data": {
          "sentry.op": "http.server",
          "sentry.origin": "auto.http.node.tracingHandler",
          "sentry.sample_rate": 1,
          "sentry.source": "url"
        },
        "op": "http.server",
        "origin": "auto.http.node.tracingHandler",
        "span_id": "[[ID3]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": false,
            "type": "middleware"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 5,
                "context_line": "    next();",
                "filename": "[[FILENAME1]]",
                "function": "sentryTracingMiddleware",
                "in_app": false,
                "lineno": 91,
                "module": "@sentry.node.cjs:handlers",
                "post_context": [
                  "  };",
                  "}",
                  "",
                  "/**",
                  " * Backwards compatibility shim which can be removed in v8. Forces the given options to follow the",
                  " * `AddRequestDataToEventOptions` interface.",
                  " *"
                ],
                "pre_context": [
                  "        // eslint-disable-next-line deprecation/deprecation",
                  "        utils.addRequestDataToTransaction(transaction, req);",
                  "        core.setHttpStatus(transaction, res.statusCode);",
                  "        transaction.end();",
                  "      });",
                  "    });",
                  ""
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 14,
                "context_line": "      return next(err);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 161,
                "module": "connect:index",
                "post_context": [
                  "    }",
                  "",
                  "    // skip if route match does not border \"/\", \".\", or end",
                  "    var c = path.length > route.length && path[route.length];",
                  "    if (c && c !== '/' && c !== '.') {",
                  "      return next(err);",
                  "    }"
                ],
                "pre_context": [
                  "",
                  "    // route data",
                  "    var path = parseUrl(req).pathname || '/';",
                  "    var route = layer.route;",
                  "",
                  "    // skip this layer if the route doesn't match",
                  "    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {"
                ]
              },
              {
                "colno": 5,
                "context_line": "    call(layer.handle, route, err, req, res, next);",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 183,
                "module": "connect:index",
                "post_context": [
                  "  }",
                  "",
                  "  next();",
                  "};",
                  "",
                  "/**",
                  " * Listen for connections."
                ],
                "pre_context": [
                  "      if (!protohost && req.url[0] !== '/') {",
                  "        req.url = '/' + req.url;",
                  "        slashAdded = true;",
                  "      }",
                  "    }",
                  "",
                  "    // call the layer handle"
                ]
              },
              {
                "colno": 7,
                "context_line": "      handle(req, res, next);",
                "filename": "[[FILENAME2]]",
                "function": "call",
                "in_app": false,
                "lineno": 239,
                "module": "connect:index",
                "post_context": [
                  "      return;",
                  "    }",
                  "  } catch (e) {",
                  "    // replace the error",
                  "    error = e;",
                  "  }",
                  ""
                ],
                "pre_context": [
                  "  try {",
                  "    if (hasError && arity === 4) {",
                  "      // error-handling middleware",
                  "      handle(err, req, res, next);",
                  "      return;",
                  "    } else if (!hasError && arity < 4) {",
                  "      // request-handling middleware"
                ]
              },
              {
                "colno": 11,
                "context_line": "    throw new Error(\"Uncaught Local Variable Error - \".concat(stringify({ randomVariableToRecord: randomVariableToRecord })));",
                "filename": "[[FILENAME3]]",
                "function": "<anonymous>",
                "in_app": true,
                "lineno": 166,
                "module": "app",
                "post_context": [
                  "});",
                  "app.use('/test-local-variables-caught', function (req, res) {",
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "    var exceptionId;",
                  "    try {",
                  "        throw new Error('Local Variable Error');",
                  "    }"
                ],
                "pre_context": [
                  "                    return [2 /*return*/];",
                  "            }",
                  "        });",
                  "    });",
                  "});",
                  "app.use('/test-local-variables-uncaught', function (req, res) {",
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';"
                ],
                "vars": {
                  "randomVariableToRecord": "LOCAL VARIABLE",
                  "req": "<IncomingMessage>",
                  "res": "<ServerResponse>"
                }
              }
            ]
          },
          "type": "Error",
          "value": "Uncaught Local Variable Error - {\n  \"randomVariableToRecord\": \"LOCAL VARIABLE\"\n}"
        }
      ]
    },
    "modules": {
      "connect": "3.7.0",
      "dotenv": "16.4.5",
      "ee-first": "1.1.1",
      "encodeurl": "1.0.2",
      "escape-html": "1.0.3",
      "finalhandler": "1.1.2",
      "parseurl": "1.3.3",
      "unpipe": "1.0.0",
      "utils-merge": "1.0.1"
    },
    "platform": "node",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "host": "localhost:3030",
        "pragma": "no-cache",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "[[user-agent]]"
      },
      "method": "GET",
      "url": "http://localhost:3030/test-local-variables-uncaught"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "Undici",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariables",
        "Context",
        "Modules"
      ],
      "name": "sentry.javascript.node",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "7.110.1"
        }
      ],
      "version": "7.110.1"
    },
    "server_name": "D9M3PY4LQ7.oekorouter.com",
    "tags": {
      "transaction": "GET /test-local-variables-uncaught"
    },
    "timestamp": "[[timestamp]]",
    "transaction": "GET /test-local-variables-uncaught"
  }
]
