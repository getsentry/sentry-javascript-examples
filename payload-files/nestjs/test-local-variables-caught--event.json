[
  {
    "event_id": "[[ID1]]",
    "sent_at": "[[ISODateString]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "7.110.1"
    },
    "dsn": "[[dsn]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "trace_id": "[[ID2]]",
      "sample_rate": "1",
      "transaction": "GET /test-local-variables-caught",
      "sampled": "true"
    }
  },
  {
    "type": "event"
  },
  {
    "exception": {
      "values": [
        {
          "type": "Error",
          "value": "Local Variable Error",
          "stacktrace": {
            "frames": [
              {
                "filename": "[[FILENAME1]]",
                "module": "express.lib.router:layer",
                "function": "Layer.handle [as handle_request]",
                "lineno": 95,
                "colno": 5,
                "in_app": false,
                "pre_context": [
                  "",
                  "  if (fn.length > 3) {",
                  "    // not a standard request handler",
                  "    return next();",
                  "  }",
                  "",
                  "  try {"
                ],
                "context_line": "    fn(req, res, next);",
                "post_context": [
                  "  } catch (err) {",
                  "    next(err);",
                  "  }",
                  "};",
                  "",
                  "/**",
                  " * Check if this route matches `path`, if so"
                ]
              },
              {
                "filename": "[[FILENAME2]]",
                "module": "express.lib.router:route",
                "function": "Route.dispatch",
                "lineno": 119,
                "colno": 3,
                "in_app": false,
                "pre_context": [
                  "",
                  "  if (method === 'head' && !this.methods['head']) {",
                  "    method = 'get';",
                  "  }",
                  "",
                  "  req.route = this;",
                  ""
                ],
                "context_line": "  next();",
                "post_context": [
                  "",
                  "  function next(err) {",
                  "    // signal to exit route",
                  "    if (err && err === 'route') {",
                  "      return done();",
                  "    }",
                  ""
                ]
              },
              {
                "filename": "[[FILENAME2]]",
                "module": "express.lib.router:route",
                "function": "next",
                "lineno": 149,
                "colno": 13,
                "in_app": false,
                "pre_context": [
                  "    }",
                  "",
                  "    if (layer.method && layer.method !== method) {",
                  "      next(err)",
                  "    } else if (err) {",
                  "      layer.handle_error(err, req, res, next);",
                  "    } else {"
                ],
                "context_line": "      layer.handle_request(req, res, next);",
                "post_context": ["    }", "", "    sync = 0", "  }", "};", "", "/**"]
              },
              {
                "filename": "[[FILENAME1]]",
                "module": "express.lib.router:layer",
                "function": "Layer.handle [as handle_request]",
                "lineno": 95,
                "colno": 5,
                "in_app": false,
                "pre_context": [
                  "",
                  "  if (fn.length > 3) {",
                  "    // not a standard request handler",
                  "    return next();",
                  "  }",
                  "",
                  "  try {"
                ],
                "context_line": "    fn(req, res, next);",
                "post_context": [
                  "  } catch (err) {",
                  "    next(err);",
                  "  }",
                  "};",
                  "",
                  "/**",
                  " * Check if this route matches `path`, if so"
                ]
              },
              {
                "filename": "[[FILENAME3]]",
                "module": "@nestjs.core.router:router-proxy",
                "function": "<anonymous>",
                "lineno": 9,
                "colno": 23,
                "in_app": false,
                "pre_context": [
                  "Object.defineProperty(exports, \"__esModule\", { value: true });",
                  "exports.RouterProxy = void 0;",
                  "const execution_context_host_1 = require(\"../helpers/execution-context-host\");",
                  "class RouterProxy {",
                  "    createProxy(targetCallback, exceptionsHandler) {",
                  "        return async (req, res, next) => {",
                  "            try {"
                ],
                "context_line": "                await targetCallback(req, res, next);",
                "post_context": [
                  "            }",
                  "            catch (e) {",
                  "                const host = new execution_context_host_1.ExecutionContextHost([req, res, next]);",
                  "                exceptionsHandler.next(e, host);",
                  "                return res;",
                  "            }",
                  "        };"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "@nestjs.core.router:router-execution-context",
                "function": "<anonymous>",
                "lineno": 46,
                "colno": 60,
                "in_app": false,
                "pre_context": [
                  "        };",
                  "        return async (req, res, next) => {",
                  "            const args = this.contextUtils.createNullArray(argsLength);",
                  "            fnCanActivate && (await fnCanActivate([req, res, next]));",
                  "            this.responseController.setStatus(res, httpStatusCode);",
                  "            hasCustomHeaders &&",
                  "                this.responseController.setHeaders(res, responseHeaders);"
                ],
                "context_line": "            const result = await this.interceptorsConsumer.intercept(interceptors, [req, res, next], instance, callback, handler(args, req,  {snip}",
                "post_context": [
                  "            await fnHandleResponse(result, res, req);",
                  "        };",
                  "    }",
                  "    getMetadata(instance, callback, methodName, moduleKey, requestMethod, contextType) {",
                  "        const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);",
                  "        if (cacheMetadata) {",
                  "            return cacheMetadata;"
                ]
              },
              {
                "filename": "[[FILENAME5]]",
                "module": "@nestjs.core.interceptors:interceptors-consumer",
                "function": "InterceptorsConsumer.intercept",
                "lineno": 12,
                "colno": 20,
                "in_app": false,
                "pre_context": [
                  "const async_hooks_1 = require(\"async_hooks\");",
                  "const rxjs_1 = require(\"rxjs\");",
                  "const operators_1 = require(\"rxjs/operators\");",
                  "const execution_context_host_1 = require(\"../helpers/execution-context-host\");",
                  "class InterceptorsConsumer {",
                  "    async intercept(interceptors, args, instance, callback, next, type) {",
                  "        if ((0, shared_utils_1.isEmpty)(interceptors)) {"
                ],
                "context_line": "            return next();",
                "post_context": [
                  "        }",
                  "        const context = this.createContext(args, instance, callback);",
                  "        context.setType(type);",
                  "        const nextFn = async (i = 0) => {",
                  "            if (i >= interceptors.length) {",
                  "                return (0, rxjs_1.defer)(async_hooks_1.AsyncResource.bind(() => this.transformDeferred(next)));",
                  "            }"
                ]
              },
              {
                "filename": "[[FILENAME4]]",
                "module": "@nestjs.core.router:router-execution-context",
                "function": "<anonymous>",
                "lineno": 38,
                "colno": 29,
                "in_app": false,
                "pre_context": [
                  "        const pipes = this.pipesContextCreator.create(instance, callback, moduleKey, contextId, inquirerId);",
                  "        const guards = this.guardsContextCreator.create(instance, callback, moduleKey, contextId, inquirerId);",
                  "        const interceptors = this.interceptorsContextCreator.create(instance, callback, moduleKey, contextId, inquirerId);",
                  "        const fnCanActivate = this.createGuardsFn(guards, instance, callback, contextType);",
                  "        const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);",
                  "        const handler = (args, req, res, next) => async () => {",
                  "            fnApplyPipes && (await fnApplyPipes(args, req, res, next));"
                ],
                "context_line": "            return callback.apply(instance, args);",
                "post_context": [
                  "        };",
                  "        return async (req, res, next) => {",
                  "            const args = this.contextUtils.createNullArray(argsLength);",
                  "            fnCanActivate && (await fnCanActivate([req, res, next]));",
                  "            this.responseController.setStatus(res, httpStatusCode);",
                  "            hasCustomHeaders &&",
                  "                this.responseController.setHeaders(res, responseHeaders);"
                ]
              },
              {
                "filename": "[[FILENAME6]]",
                "module": "app.controller",
                "function": "AppController.testLocalVariablesCaught",
                "lineno": 44,
                "colno": 32,
                "in_app": true,
                "pre_context": [
                  "    AppController.prototype.testErrorManual = function () {",
                  "        return this.appService.testErrorManual();",
                  "    };",
                  "    AppController.prototype.testLocalVariablesUncaught = function () {",
                  "        return this.appService.testLocalVariablesUncaught();",
                  "    };",
                  "    AppController.prototype.testLocalVariablesCaught = function () {"
                ],
                "context_line": "        return this.appService.testLocalVariablesCaught();",
                "post_context": [
                  "    };",
                  "    __decorate([",
                  "        (0, common_1.Get)('test-success'),",
                  "        __metadata(\"design:type\", Function),",
                  "        __metadata(\"design:paramtypes\", []),",
                  "        __metadata(\"design:returntype\", void 0)",
                  "    ], AppController.prototype, \"testSuccess\", null);"
                ]
              },
              {
                "filename": "[[FILENAME7]]",
                "module": "app.service",
                "function": "AppService.testLocalVariablesCaught",
                "lineno": 152,
                "colno": 19,
                "in_app": true,
                "pre_context": [
                  "        var randomVariableToRecord = 'LOCAL_VARIABLE';",
                  "        throw new Error(\"Uncaught Local Variable Error - \".concat(JSON.stringify({ randomVariableToRecord: randomVariableToRecord })));",
                  "    };",
                  "    AppService.prototype.testLocalVariablesCaught = function () {",
                  "        var randomVariableToRecord = 'LOCAL_VARIABLE';",
                  "        var exceptionId;",
                  "        try {"
                ],
                "context_line": "            throw new Error('Local Variable Error');",
                "post_context": [
                  "        }",
                  "        catch (e) {",
                  "            exceptionId = Sentry.captureException(e);",
                  "        }",
                  "        return { exceptionId: exceptionId, randomVariableToRecord: randomVariableToRecord };",
                  "    };",
                  "    AppService = __decorate(["
                ]
              }
            ]
          },
          "mechanism": {
            "type": "generic",
            "handled": true
          }
        }
      ]
    },
    "event_id": "[[ID1]]",
    "platform": "node",
    "contexts": {
      "trace": {
        "data": {
          "sentry.source": "url",
          "sentry.origin": "auto.http.node.tracingHandler",
          "sentry.op": "http.server",
          "sentry.sample_rate": 1
        },
        "op": "http.server",
        "span_id": "[[ID3]]",
        "trace_id": "[[ID2]]",
        "origin": "auto.http.node.tracingHandler"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "app": {
        "app_start_time": "[[ISODateString]]",
        "app_memory": "[[highNumber]]"
      },
      "os": {
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2",
        "build": "23C64"
      },
      "device": {
        "boot_time": "[[ISODateString]]",
        "arch": "arm64",
        "memory_size": "[[highNumber]]",
        "free_memory": "[[highNumber]]",
        "processor_count": 10,
        "cpu_description": "Apple M1 Pro",
        "processor_frequency": "[[highNumber]]"
      },
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "cloud_resource": {}
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "environment": "qa",
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "Undici",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariables",
        "Context",
        "Modules"
      ],
      "name": "sentry.javascript.node",
      "version": "7.110.1",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "7.110.1"
        }
      ]
    },
    "tags": {
      "transaction": "GET /test-local-variables-caught"
    },
    "request": {
      "method": "GET",
      "cookies": {},
      "headers": {
        "host": "localhost:3030",
        "user-agent": "[[user-agent]]",
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-language": "en-US,en;q=0.5",
        "accept-encoding": "gzip, deflate, br",
        "connection": "keep-alive",
        "upgrade-insecure-requests": "1",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "pragma": "no-cache",
        "cache-control": "no-cache"
      },
      "query_string": {},
      "url": "http://localhost:3030/test-local-variables-caught"
    },
    "transaction": "GET /test-local-variables-caught",
    "modules": {
      "source-map-support": "0.5.21",
      "buffer-from": "1.1.2",
      "tslib": "2.6.2",
      "reflect-metadata": "0.2.2",
      "uid": "2.0.2",
      "iterare": "1.2.1",
      "rxjs": "7.8.1",
      "fast-safe-stringify": "2.1.1",
      "body-parser": "1.20.2",
      "depd": "2.0.0",
      "cors": "2.8.5",
      "object-assign": "4.1.1",
      "vary": "1.1.2",
      "express": "4.19.2",
      "merge-descriptors": "1.0.1",
      "finalhandler": "1.2.0",
      "encodeurl": "1.0.2",
      "escape-html": "1.0.3",
      "on-finished": "2.4.1",
      "ee-first": "1.1.1",
      "parseurl": "1.3.3",
      "statuses": "2.0.1",
      "unpipe": "1.0.0",
      "array-flatten": "1.1.1",
      "path-to-regexp": "0.1.7",
      "methods": "1.1.2",
      "utils-merge": "1.0.1",
      "setprototypeof": "1.2.0",
      "qs": "6.11.0",
      "side-channel": "1.0.6",
      "get-intrinsic": "1.2.4",
      "es-errors": "1.3.0",
      "has-symbols": "1.0.3",
      "has-proto": "1.0.3",
      "function-bind": "1.1.2",
      "hasown": "2.0.2",
      "call-bind": "1.0.7",
      "set-function-length": "1.2.2",
      "define-data-property": "1.1.4",
      "es-define-property": "1.0.0",
      "gopd": "1.0.1",
      "has-property-descriptors": "1.0.2",
      "object-inspect": "1.13.1",
      "safe-buffer": "5.2.1",
      "content-disposition": "0.5.4",
      "content-type": "1.0.5",
      "send": "0.18.0",
      "http-errors": "2.0.0",
      "inherits": "2.0.4",
      "toidentifier": "1.0.1",
      "destroy": "1.2.0",
      "etag": "1.8.1",
      "fresh": "0.5.2",
      "mime": "1.6.0",
      "ms": "2.1.3",
      "range-parser": "1.2.1",
      "proxy-addr": "2.0.7",
      "forwarded": "0.2.0",
      "ipaddr.js": "1.9.1",
      "accepts": "1.3.8",
      "negotiator": "0.6.3",
      "mime-types": "2.1.35",
      "mime-db": "1.52.0",
      "type-is": "1.6.18",
      "media-typer": "0.3.0",
      "cookie-signature": "1.0.6",
      "cookie": "0.6.0",
      "bytes": "3.1.2",
      "raw-body": "2.5.2",
      "iconv-lite": "0.4.24",
      "safer-buffer": "2.1.2",
      "serve-static": "1.15.0",
      "multer": "1.4.4-lts.1",
      "busboy": "1.6.0",
      "streamsearch": "1.1.0",
      "xtend": "4.0.2",
      "append-field": "1.0.0",
      "concat-stream": "1.6.2",
      "process-nextick-args": "2.0.1",
      "isarray": "1.0.0",
      "core-util-is": "1.0.3",
      "util-deprecate": "1.0.2"
    }
  }
]
