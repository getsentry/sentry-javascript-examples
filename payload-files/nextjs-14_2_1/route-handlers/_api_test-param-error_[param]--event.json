[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.nextjs",
      "version": "8.0.0-beta.3"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "sample_rate": "1",
      "sampled": "true",
      "trace_id": "[[ID2]]",
      "transaction": "GET /api/test-param-error/[param]"
    }
  },
  {
    "type": "event"
  },
  {
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "parent_span_id": "[[ID3]]",
        "span_id": "[[ID4]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": true,
            "type": "generic"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": "[[highNumber]]",
                "context_line": "'{snip} SpanAttributes())||o.set(\"next.route\",l),(0,M.getTracer)().trace(d.runHandler,{spanName:`executing api route (app) ${l}`,attributes:{\"next.r {snip}",
                "filename": "[[FILENAME1]]",
                "function": "?",
                "in_app": false,
                "lineno": 6,
                "module": "next.dist.compiled.next-server:app-route.runtime.dev",
                "post_context": ["//# sourceMappingURL=app-route.runtime.dev.js.map"],
                "pre_context": [
                  "(()=>{var e={\"./dist/compiled/@edge-runtime/cookies/index.js\":e=>{\"use strict\";var t=Object.defineProperty,r=Object.getOwnPropertyDescriptor {snip}",
                  " * cookie",
                  " * Copyright(c) 2012-2014 Roman Shtylman",
                  " * Copyright(c) 2015 Douglas Christopher Wilson",
                  " * MIT Licensed"
                ]
              },
              {
                "colno": 28,
                "context_line": "        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{",
                "filename": "[[FILENAME2]]",
                "function": "NextTracerImpl.trace",
                "in_app": false,
                "lineno": 122,
                "module": "next.dist.server.lib.trace:tracer",
                "post_context": [
                  "                const startTime = \"performance\" in globalThis ? globalThis.performance.now() : undefined;",
                  "                const onCleanup = ()=>{",
                  "                    rootSpanAttributesStore.delete(spanId);",
                  "                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && _constants.LogSpanAllowList.includes(type || \"\")) {",
                  "                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split(\".\").pop() || \"\").replace(/[A-Z] {snip}",
                  "                            start: startTime,",
                  "                            end: performance.now()"
                ],
                "pre_context": [
                  "        }",
                  "        const spanId = getSpanId();",
                  "        options.attributes = {",
                  "            \"next.span_name\": spanName,",
                  "            \"next.span_type\": type,",
                  "            ...options.attributes",
                  "        };"
                ]
              },
              {
                "colno": 46,
                "context_line": "        return this._getContextManager().with(context, fn, thisArg, ...args);",
                "filename": "[[FILENAME3]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 60,
                "module": "@opentelemetry.api.build.src.api:context",
                "post_context": [
                  "    }",
                  "    /**",
                  "     * Bind a context to a target function or event emitter",
                  "     *",
                  "     * @param context context to bind to the event emitter or function. Defaults to the currently active context",
                  "     * @param target function or event emitter to bind",
                  "     */"
                ],
                "pre_context": [
                  "     *",
                  "     * @param context context to be active during function execution",
                  "     * @param fn function to execute in a context",
                  "     * @param thisArg optional receiver to be used for calling fn",
                  "     * @param args optional arguments forwarded to fn",
                  "     */",
                  "    with(context, fn, thisArg, ...args) {"
                ]
              },
              {
                "colno": 24,
                "filename": "[[FILENAME4]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 103,
                "context_line": "        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{",
                "filename": "[[FILENAME2]]",
                "function": "?",
                "in_app": false,
                "lineno": 122,
                "module": "next.dist.server.lib.trace:tracer",
                "post_context": [
                  "                const startTime = \"performance\" in globalThis ? globalThis.performance.now() : undefined;",
                  "                const onCleanup = ()=>{",
                  "                    rootSpanAttributesStore.delete(spanId);",
                  "                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && _constants.LogSpanAllowList.includes(type || \"\")) {",
                  "                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split(\".\").pop() || \"\").replace(/[A-Z] {snip}",
                  "                            start: startTime,",
                  "                            end: performance.now()"
                ],
                "pre_context": [
                  "        }",
                  "        const spanId = getSpanId();",
                  "        options.attributes = {",
                  "            \"next.span_name\": spanName,",
                  "            \"next.span_type\": type,",
                  "            ...options.attributes",
                  "        };"
                ]
              },
              {
                "colno": 76,
                "filename": "[[FILENAME7]]",
                "function": "Tracer.startActiveSpan",
                "in_app": false,
                "lineno": 136,
                "module": "@opentelemetry.sdk-trace-base.build.esm:Tracer"
              },
              {
                "colno": 54,
                "filename": "[[FILENAME8]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 95,
                "module": "@opentelemetry.api.build.esm.api:context"
              },
              {
                "colno": 24,
                "filename": "[[FILENAME4]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 36,
                "context_line": "                    const result = fn(span);",
                "filename": "[[FILENAME2]]",
                "function": "?",
                "in_app": false,
                "lineno": 140,
                "module": "next.dist.server.lib.trace:tracer",
                "post_context": [
                  "                    if (isPromise(result)) {",
                  "                        // If there's error make sure it throws",
                  "                        return result.then((res)=>{",
                  "                            span.end();",
                  "                            // Need to pass down the promise result,",
                  "                            // it could be react stream response with error { error, stream }",
                  "                            return res;"
                ],
                "pre_context": [
                  "                if (isRootSpan) {",
                  "                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));",
                  "                }",
                  "                try {",
                  "                    if (fn.length > 1) {",
                  "                        return fn(span, (err)=>closeSpanWithError(span, err));",
                  "                    }"
                ]
              },
              {
                "colno": "[[highNumber]]",
                "context_line": "'{snip} yncStorage:this.staticGenerationAsyncStorage});let o=await r(i,{params:t.params?function(e){let t={};for(let[r,n]of Object.entries(e))void 0 {snip}",
                "filename": "[[FILENAME1]]",
                "function": "?",
                "in_app": false,
                "lineno": 6,
                "module": "next.dist.compiled.next-server:app-route.runtime.dev",
                "post_context": ["//# sourceMappingURL=app-route.runtime.dev.js.map"],
                "pre_context": [
                  "(()=>{var e={\"./dist/compiled/@edge-runtime/cookies/index.js\":e=>{\"use strict\";var t=Object.defineProperty,r=Object.getOwnPropertyDescriptor {snip}",
                  " * cookie",
                  " * Copyright(c) 2012-2014 Roman Shtylman",
                  " * Copyright(c) 2015 Douglas Christopher Wilson",
                  " * MIT Licensed"
                ]
              },
              {
                "colno": 10,
                "filename": "[[FILENAME9]]",
                "function": "Object.apply",
                "in_app": true,
                "lineno": 68,
                "module": "route.ts"
              },
              {
                "colno": 27,
                "filename": "[[FILENAME10]]",
                "function": "Object.apply",
                "in_app": false,
                "lineno": 22,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry"
              },
              {
                "colno": 17,
                "filename": "[[FILENAME11]]",
                "function": "Object.escapeNextjsTracing",
                "in_app": false,
                "lineno": 83,
                "module": "@sentry.nextjs.cjs.common.utils:tracingUtils"
              },
              {
                "colno": 16,
                "filename": "[[FILENAME12]]",
                "function": "Object.withActiveSpan",
                "in_app": false,
                "lineno": 189,
                "module": "@sentry.core.cjs.tracing:trace"
              },
              {
                "colno": 26,
                "filename": "[[FILENAME4]]",
                "function": "Object.withActiveSpan",
                "in_app": false,
                "lineno": 948,
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 54,
                "filename": "[[FILENAME8]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 95,
                "module": "@opentelemetry.api.build.esm.api:context"
              },
              {
                "colno": 24,
                "filename": "[[FILENAME4]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 59,
                "filename": "[[FILENAME4]]",
                "function": "eval",
                "in_app": false,
                "lineno": 948,
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME11]]",
                "function": "eval",
                "in_app": false,
                "lineno": 88,
                "module": "@sentry.nextjs.cjs.common.utils:tracingUtils"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 16,
                "filename": "[[FILENAME11]]",
                "function": "eval",
                "in_app": false,
                "lineno": 89,
                "module": "@sentry.nextjs.cjs.common.utils:tracingUtils"
              },
              {
                "colno": 21,
                "filename": "[[FILENAME10]]",
                "function": "eval",
                "in_app": false,
                "lineno": 40,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry"
              },
              {
                "colno": 16,
                "filename": "[[FILENAME13]]",
                "function": "Object.withIsolationScope",
                "in_app": false,
                "lineno": 103,
                "module": "@sentry.core.cjs:currentScopes"
              },
              {
                "colno": 28,
                "filename": "[[FILENAME4]]",
                "function": "Object.withSetIsolationScope",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 54,
                "filename": "[[FILENAME8]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 95,
                "module": "@opentelemetry.api.build.esm.api:context"
              },
              {
                "colno": 24,
                "filename": "[[FILENAME4]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME4]]",
                "function": "eval",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 25,
                "filename": "[[FILENAME10]]",
                "function": "eval",
                "in_app": false,
                "lineno": 43,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry"
              },
              {
                "colno": 16,
                "filename": "[[FILENAME12]]",
                "function": "Object.startSpan",
                "in_app": false,
                "lineno": 35,
                "module": "@sentry.core.cjs.tracing:trace"
              },
              {
                "colno": 17,
                "filename": "[[FILENAME4]]",
                "function": "Object.startSpan",
                "in_app": false,
                "lineno": 855,
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 76,
                "filename": "[[FILENAME7]]",
                "function": "Tracer.startActiveSpan",
                "in_app": false,
                "lineno": 136,
                "module": "@opentelemetry.sdk-trace-base.build.esm:Tracer"
              },
              {
                "colno": 54,
                "filename": "[[FILENAME8]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 95,
                "module": "@opentelemetry.api.build.esm.api:context"
              },
              {
                "colno": 24,
                "filename": "[[FILENAME4]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 40,
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager"
              },
              {
                "colno": 14,
                "filename": "[[FILENAME6]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 17,
                "filename": "[[FILENAME4]]",
                "function": "eval",
                "in_app": false,
                "lineno": 858,
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 26,
                "filename": "[[FILENAME14]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors"
              },
              {
                "colno": 13,
                "filename": "[[FILENAME4]]",
                "function": "eval",
                "in_app": false,
                "lineno": 859,
                "module": "@sentry.opentelemetry.cjs:index"
              },
              {
                "colno": 45,
                "filename": "[[FILENAME10]]",
                "function": "eval",
                "in_app": false,
                "lineno": 54,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry"
              },
              {
                "colno": 26,
                "filename": "[[FILENAME15]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors"
              },
              {
                "colno": 42,
                "filename": "[[FILENAME10]]",
                "function": "eval",
                "in_app": false,
                "lineno": 55,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry"
              },
              {
                "colno": 86,
                "filename": "[[FILENAME9]]",
                "function": "GET$1",
                "in_app": true,
                "lineno": 22,
                "module": "route.ts"
              }
            ]
          },
          "type": "Error",
          "value": "This is an error"
        }
      ]
    },
    "modules": {},
    "platform": "node",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "*/*",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "baggage": "sentry-environment=qa,sentry-public_key=3b6c388182fb435097f41d181be2b2ba,sentry-trace_id=849afbc4d0a24f309883f0df27432370,sentry-sample_rate=1,sentry-sampled=true",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "host": "localhost:3030",
        "pragma": "no-cache",
        "referer": "http://localhost:3030/test-route-handlers",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "sentry-trace": "849afbc4d0a24f309883f0df27432370-9004ba82f6434237-1",
        "user-agent": "[[user-agent]]",
        "x-forwarded-for": "::ffff:127.0.0.1",
        "x-forwarded-host": "localhost:3030",
        "x-forwarded-port": "3030",
        "x-forwarded-proto": "http"
      },
      "url": "http://localhost:3030"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariablesAsync",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa",
        "Connect",
        "Http",
        "DistDirRewriteFrames"
      ],
      "name": "sentry.javascript.nextjs",
      "packages": [
        {
          "name": "npm:@sentry/nextjs",
          "version": "8.0.0-beta.3"
        },
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-beta.3"
        }
      ],
      "version": "8.0.0-beta.3"
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "transaction": "GET /api/test-param-error/[param]"
  }
]
