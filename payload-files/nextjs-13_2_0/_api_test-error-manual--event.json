[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.nextjs",
      "version": "7.110.1"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "trace_id": "[[ID2]]"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-success/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled client and server successfully in 255 ms (1321 modules)",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-error/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled successfully in 91 ms (502 modules)",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-param-success/[param]/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled successfully in 108 ms (502 modules)",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-param-error/[param]/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled successfully in 98 ms (504 modules)",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-success-manual/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled successfully in 96 ms (506 modules)",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[36mwait\u001b[39m  - compiling /api/test-error-manual/route (client and server)...",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[35mevent\u001b[39m - compiled successfully in 99 ms (508 modules)",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "data": {
          "sentry.origin": "manual"
        },
        "origin": "manual",
        "parent_span_id": "[[ID3]]",
        "span_id": "[[ID4]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": true,
            "type": "generic"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 14,
                "filename": "[[FILENAME1]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "context_line": "      return callback();",
                "filename": "[[FILENAME2]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 46,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ],
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ]
              },
              {
                "colno": 12,
                "context_line": "    return callback(hub.getIsolationScope());",
                "filename": "[[FILENAME3]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 208,
                "module": "@sentry.core.cjs:exports",
                "post_context": [
                  "  });",
                  "}",
                  "",
                  "/**",
                  " * Forks the current scope and sets the provided span as active span in the context of the provided callback.",
                  " *",
                  " * @param span Spans started in the context of the provided callback will be children of this span."
                ],
                "pre_context": [
                  " *",
                  " * @param callback The callback in which the passed isolation scope is active. (Note: In environments without async",
                  " * context strategy, the currently active isolation scope may change within execution of the callback.)",
                  " * @returns The same value that `callback` returns.",
                  " */",
                  "function withIsolationScope(callback) {",
                  "  return hub.runWithAsyncContext(() => {"
                ]
              },
              {
                "colno": 21,
                "context_line": "        return core.continueTrace(",
                "filename": "[[FILENAME4]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 33,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry",
                "post_context": [
                  "          {",
                  "            sentryTrace: _nullishCoalesce(_nullishCoalesce(sentryTraceHeader, () => ( _optionalChain([headers, 'optionalAccess', _ => _.get, {snip}",
                  "            baggage: _nullishCoalesce(baggageHeader, () => ( _optionalChain([headers, 'optionalAccess', _3 => _3.get, 'call', _4 => _4('baggage')]))),",
                  "          },",
                  "          async () => {",
                  "            try {",
                  "              return await core.startSpan("
                ],
                "pre_context": [
                  "    apply: (originalFunction, thisArg, args) => {",
                  "      return core.withIsolationScope(async isolationScope => {",
                  "        isolationScope.setSDKProcessingMetadata({",
                  "          request: {",
                  "            headers: headers ? utils.winterCGHeadersToDict(headers) : undefined,",
                  "          },",
                  "        });"
                ]
              },
              {
                "colno": 14,
                "context_line": "  return hub.runWithAsyncContext(() => {",
                "filename": "[[FILENAME5]]",
                "function": "Object.continueTrace",
                "in_app": false,
                "lineno": 270,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "    return callback(transactionContext);",
                  "  });",
                  "};",
                  "",
                  "function createChildSpanOrTransaction(",
                  "  // eslint-disable-next-line deprecation/deprecation",
                  "  hub$1,"
                ],
                "pre_context": [
                  "    }),",
                  "  };",
                  "",
                  "  if (!callback) {",
                  "    return transactionContext;",
                  "  }",
                  ""
                ]
              },
              {
                "colno": 36,
                "context_line": "    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);",
                "filename": "[[FILENAME6]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 777,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "  }",
                  "",
                  "  // if there was no strategy, fallback to just calling the callback",
                  "  return callback();",
                  "}",
                  "",
                  "/**"
                ],
                "pre_context": [
                  " * @param options Options to pass to the async context strategy",
                  " * @returns The result of the callback",
                  " */",
                  "function runWithAsyncContext(callback, options = {}) {",
                  "  const registry = getMainCarrier();",
                  "",
                  "  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {"
                ]
              },
              {
                "colno": 25,
                "context_line": "    return asyncStorage.run(newHub, () => {",
                "filename": "[[FILENAME2]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 45,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "      return callback();",
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  ""
                ],
                "pre_context": [
                  "      // We're already in an async context, so we don't need to create a new one",
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  ""
                ]
              },
              {
                "colno": 14,
                "filename": "[[FILENAME1]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "context_line": "      return callback();",
                "filename": "[[FILENAME2]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 46,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ],
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ]
              },
              {
                "colno": 12,
                "context_line": "    return callback(transactionContext);",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 271,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "  });",
                  "};",
                  "",
                  "function createChildSpanOrTransaction(",
                  "  // eslint-disable-next-line deprecation/deprecation",
                  "  hub$1,",
                  "  {"
                ],
                "pre_context": [
                  "  };",
                  "",
                  "  if (!callback) {",
                  "    return transactionContext;",
                  "  }",
                  "",
                  "  return hub.runWithAsyncContext(() => {"
                ]
              },
              {
                "colno": 33,
                "context_line": "              return await core.startSpan(",
                "filename": "[[FILENAME4]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 40,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry",
                "post_context": [
                  "                {",
                  "                  op: 'http.server',",
                  "                  name: `${method} ${parameterizedRoute}`,",
                  "                  attributes: {",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',",
                  "                  },"
                ],
                "pre_context": [
                  "        return core.continueTrace(",
                  "          {",
                  "            sentryTrace: _nullishCoalesce(_nullishCoalesce(sentryTraceHeader, () => ( _optionalChain([headers, 'optionalAccess', _ => _.get, {snip}",
                  "            baggage: _nullishCoalesce(baggageHeader, () => ( _optionalChain([headers, 'optionalAccess', _3 => _3.get, 'call', _4 => _4('baggage')]))),",
                  "          },",
                  "          async () => {",
                  "            try {"
                ]
              },
              {
                "colno": 14,
                "context_line": "  return hub.runWithAsyncContext(() => {",
                "filename": "[[FILENAME5]]",
                "function": "Object.startSpan",
                "in_app": false,
                "lineno": 82,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "    return exports$1.withScope(context.scope, scope => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;"
                ],
                "pre_context": [
                  " * Note that if you have not enabled tracing extensions via `addTracingExtensions`",
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  ""
                ]
              },
              {
                "colno": 36,
                "context_line": "    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);",
                "filename": "[[FILENAME6]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 777,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "  }",
                  "",
                  "  // if there was no strategy, fallback to just calling the callback",
                  "  return callback();",
                  "}",
                  "",
                  "/**"
                ],
                "pre_context": [
                  " * @param options Options to pass to the async context strategy",
                  " * @returns The result of the callback",
                  " */",
                  "function runWithAsyncContext(callback, options = {}) {",
                  "  const registry = getMainCarrier();",
                  "",
                  "  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {"
                ]
              },
              {
                "colno": 25,
                "context_line": "    return asyncStorage.run(newHub, () => {",
                "filename": "[[FILENAME2]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 45,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "      return callback();",
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  ""
                ],
                "pre_context": [
                  "      // We're already in an async context, so we don't need to create a new one",
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  ""
                ]
              },
              {
                "colno": 14,
                "filename": "[[FILENAME1]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "context_line": "      return callback();",
                "filename": "[[FILENAME2]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 46,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ],
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ]
              },
              {
                "colno": 22,
                "context_line": "    return exports$1.withScope(context.scope, scope => {",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 83,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;",
                  "      const activeSpan = shouldSkipSpan"
                ],
                "pre_context": [
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  "",
                  "  return hub.runWithAsyncContext(() => {"
                ]
              },
              {
                "colno": 20,
                "context_line": "      return hub$1.withScope(callback);",
                "filename": "[[FILENAME3]]",
                "function": "Object.withScope",
                "in_app": false,
                "lineno": 177,
                "module": "@sentry.core.cjs:exports",
                "post_context": [
                  "    }",
                  "",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    return hub$1.withScope(() => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      hub$1.getStackTop().scope = scope ;",
                  "      return callback(scope );"
                ],
                "pre_context": [
                  "  const hub$1 = hub.getCurrentHub();",
                  "",
                  "  // If a scope is defined, we want to make this the active scope instead of the default one",
                  "  if (rest.length === 2) {",
                  "    const [scope, callback] = rest;",
                  "    if (!scope) {",
                  "      // eslint-disable-next-line deprecation/deprecation"
                ]
              },
              {
                "colno": 28,
                "context_line": "      maybePromiseResult = callback(scope);",
                "filename": "[[FILENAME6]]",
                "function": "Hub.withScope",
                "in_app": false,
                "lineno": 194,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "    } catch (e) {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      this.popScope();",
                  "      throw e;",
                  "    }",
                  "",
                  "    if (utils.isThenable(maybePromiseResult)) {"
                ],
                "pre_context": [
                  "   */",
                  "   withScope(callback) {",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    const scope = this.pushScope();",
                  "",
                  "    let maybePromiseResult;",
                  "    try {"
                ]
              },
              {
                "colno": 35,
                "context_line": "      return handleCallbackErrors.handleCallbackErrors(",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 99,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => callback(activeSpan),",
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');"
                ],
                "pre_context": [
                  "        : createChildSpanOrTransaction(hub$1, {",
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  ""
                ]
              },
              {
                "colno": 26,
                "context_line": "    maybePromiseResult = fn();",
                "filename": "[[FILENAME7]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors",
                "post_context": [
                  "  } catch (e) {",
                  "    onError(e);",
                  "    onFinally();",
                  "    throw e;",
                  "  }",
                  "",
                  "  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);"
                ],
                "pre_context": [
                  "  fn,",
                  "  onError,",
                  "  // eslint-disable-next-line @typescript-eslint/no-empty-function",
                  "  onFinally = () => {},",
                  ") {",
                  "  let maybePromiseResult;",
                  "  try {"
                ]
              },
              {
                "colno": 15,
                "context_line": "        () => callback(activeSpan),",
                "filename": "[[FILENAME5]]",
                "function": "handleCallbackErrors.handleCallbackErrors.status.status",
                "in_app": false,
                "lineno": 100,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');",
                  "            }"
                ],
                "pre_context": [
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  "",
                  "      return handleCallbackErrors.handleCallbackErrors("
                ]
              },
              {
                "colno": 47,
                "context_line": "                  const response = await core.handleCallbackErrors(",
                "filename": "[[FILENAME4]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 50,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry",
                "post_context": [
                  "                    () => originalFunction.apply(thisArg, args),",
                  "                    error => {",
                  "                      // Next.js throws errors when calling `redirect()`. We don't wanna report these.",
                  "                      if (!nextNavigationErrorUtils.isRedirectNavigationError(error)) {",
                  "                        core.captureException(error, {",
                  "                          mechanism: {",
                  "                            handled: false,"
                ],
                "pre_context": [
                  "                  name: `${method} ${parameterizedRoute}`,",
                  "                  attributes: {",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',",
                  "                  },",
                  "                },",
                  "                async span => {"
                ]
              },
              {
                "colno": 26,
                "context_line": "    maybePromiseResult = fn();",
                "filename": "[[FILENAME7]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors",
                "post_context": [
                  "  } catch (e) {",
                  "    onError(e);",
                  "    onFinally();",
                  "    throw e;",
                  "  }",
                  "",
                  "  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);"
                ],
                "pre_context": [
                  "  fn,",
                  "  onError,",
                  "  // eslint-disable-next-line @typescript-eslint/no-empty-function",
                  "  onFinally = () => {},",
                  ") {",
                  "  let maybePromiseResult;",
                  "  try {"
                ]
              },
              {
                "colno": 44,
                "context_line": "                    () => originalFunction.apply(thisArg, args),",
                "filename": "[[FILENAME4]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 51,
                "module": "@sentry.nextjs.cjs.common:wrapRouteHandlerWithSentry",
                "post_context": [
                  "                    error => {",
                  "                      // Next.js throws errors when calling `redirect()`. We don't wanna report these.",
                  "                      if (!nextNavigationErrorUtils.isRedirectNavigationError(error)) {",
                  "                        core.captureException(error, {",
                  "                          mechanism: {",
                  "                            handled: false,",
                  "                          },"
                ],
                "pre_context": [
                  "                  attributes: {",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',",
                  "                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',",
                  "                  },",
                  "                },",
                  "                async span => {",
                  "                  const response = await core.handleCallbackErrors("
                ]
              },
              {
                "colno": 49,
                "filename": "[[FILENAME8]]",
                "function": "GET$1",
                "in_app": false,
                "lineno": 23,
                "module": "route.ts"
              },
              {
                "colno": 14,
                "context_line": "  return hub.runWithAsyncContext(() => {",
                "filename": "[[FILENAME5]]",
                "function": "Object.startSpan",
                "in_app": false,
                "lineno": 82,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "    return exports$1.withScope(context.scope, scope => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;"
                ],
                "pre_context": [
                  " * Note that if you have not enabled tracing extensions via `addTracingExtensions`",
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  ""
                ]
              },
              {
                "colno": 36,
                "context_line": "    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);",
                "filename": "[[FILENAME6]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 777,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "  }",
                  "",
                  "  // if there was no strategy, fallback to just calling the callback",
                  "  return callback();",
                  "}",
                  "",
                  "/**"
                ],
                "pre_context": [
                  " * @param options Options to pass to the async context strategy",
                  " * @returns The result of the callback",
                  " */",
                  "function runWithAsyncContext(callback, options = {}) {",
                  "  const registry = getMainCarrier();",
                  "",
                  "  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {"
                ]
              },
              {
                "colno": 25,
                "context_line": "    return asyncStorage.run(newHub, () => {",
                "filename": "[[FILENAME2]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 45,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "      return callback();",
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  ""
                ],
                "pre_context": [
                  "      // We're already in an async context, so we don't need to create a new one",
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  ""
                ]
              },
              {
                "colno": 14,
                "filename": "[[FILENAME1]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "context_line": "      return callback();",
                "filename": "[[FILENAME2]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 46,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ],
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ]
              },
              {
                "colno": 22,
                "context_line": "    return exports$1.withScope(context.scope, scope => {",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 83,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;",
                  "      const activeSpan = shouldSkipSpan"
                ],
                "pre_context": [
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  "",
                  "  return hub.runWithAsyncContext(() => {"
                ]
              },
              {
                "colno": 20,
                "context_line": "      return hub$1.withScope(callback);",
                "filename": "[[FILENAME3]]",
                "function": "Object.withScope",
                "in_app": false,
                "lineno": 177,
                "module": "@sentry.core.cjs:exports",
                "post_context": [
                  "    }",
                  "",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    return hub$1.withScope(() => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      hub$1.getStackTop().scope = scope ;",
                  "      return callback(scope );"
                ],
                "pre_context": [
                  "  const hub$1 = hub.getCurrentHub();",
                  "",
                  "  // If a scope is defined, we want to make this the active scope instead of the default one",
                  "  if (rest.length === 2) {",
                  "    const [scope, callback] = rest;",
                  "    if (!scope) {",
                  "      // eslint-disable-next-line deprecation/deprecation"
                ]
              },
              {
                "colno": 28,
                "context_line": "      maybePromiseResult = callback(scope);",
                "filename": "[[FILENAME6]]",
                "function": "Hub.withScope",
                "in_app": false,
                "lineno": 194,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "    } catch (e) {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      this.popScope();",
                  "      throw e;",
                  "    }",
                  "",
                  "    if (utils.isThenable(maybePromiseResult)) {"
                ],
                "pre_context": [
                  "   */",
                  "   withScope(callback) {",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    const scope = this.pushScope();",
                  "",
                  "    let maybePromiseResult;",
                  "    try {"
                ]
              },
              {
                "colno": 35,
                "context_line": "      return handleCallbackErrors.handleCallbackErrors(",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 99,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => callback(activeSpan),",
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');"
                ],
                "pre_context": [
                  "        : createChildSpanOrTransaction(hub$1, {",
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  ""
                ]
              },
              {
                "colno": 26,
                "context_line": "    maybePromiseResult = fn();",
                "filename": "[[FILENAME7]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors",
                "post_context": [
                  "  } catch (e) {",
                  "    onError(e);",
                  "    onFinally();",
                  "    throw e;",
                  "  }",
                  "",
                  "  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);"
                ],
                "pre_context": [
                  "  fn,",
                  "  onError,",
                  "  // eslint-disable-next-line @typescript-eslint/no-empty-function",
                  "  onFinally = () => {},",
                  ") {",
                  "  let maybePromiseResult;",
                  "  try {"
                ]
              },
              {
                "colno": 15,
                "context_line": "        () => callback(activeSpan),",
                "filename": "[[FILENAME5]]",
                "function": "handleCallbackErrors.handleCallbackErrors.status.status",
                "in_app": false,
                "lineno": 100,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');",
                  "            }"
                ],
                "pre_context": [
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  "",
                  "      return handleCallbackErrors.handleCallbackErrors("
                ]
              },
              {
                "colno": 53,
                "filename": "[[FILENAME8]]",
                "function": "eval",
                "in_app": false,
                "lineno": 26,
                "module": "route.ts"
              },
              {
                "colno": 14,
                "context_line": "  return hub.runWithAsyncContext(() => {",
                "filename": "[[FILENAME5]]",
                "function": "Object.startSpan",
                "in_app": false,
                "lineno": 82,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "    return exports$1.withScope(context.scope, scope => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;"
                ],
                "pre_context": [
                  " * Note that if you have not enabled tracing extensions via `addTracingExtensions`",
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  ""
                ]
              },
              {
                "colno": 36,
                "context_line": "    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);",
                "filename": "[[FILENAME6]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 777,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "  }",
                  "",
                  "  // if there was no strategy, fallback to just calling the callback",
                  "  return callback();",
                  "}",
                  "",
                  "/**"
                ],
                "pre_context": [
                  " * @param options Options to pass to the async context strategy",
                  " * @returns The result of the callback",
                  " */",
                  "function runWithAsyncContext(callback, options = {}) {",
                  "  const registry = getMainCarrier();",
                  "",
                  "  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {"
                ]
              },
              {
                "colno": 25,
                "context_line": "    return asyncStorage.run(newHub, () => {",
                "filename": "[[FILENAME2]]",
                "function": "Object.runWithAsyncContext",
                "in_app": false,
                "lineno": 45,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "      return callback();",
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  ""
                ],
                "pre_context": [
                  "      // We're already in an async context, so we don't need to create a new one",
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  ""
                ]
              },
              {
                "colno": 14,
                "filename": "[[FILENAME1]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 14,
                "context_line": "      return callback();",
                "filename": "[[FILENAME2]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 46,
                "module": "@sentry.node.cjs.async:hooks",
                "post_context": [
                  "    });",
                  "  }",
                  "",
                  "  core.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });",
                  "}",
                  "",
                  "exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;"
                ],
                "pre_context": [
                  "      // just call the callback with the current hub",
                  "      return callback();",
                  "    }",
                  "",
                  "    const newHub = createNewHub(existingHub);",
                  "",
                  "    return asyncStorage.run(newHub, () => {"
                ]
              },
              {
                "colno": 22,
                "context_line": "    return exports$1.withScope(context.scope, scope => {",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 83,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const hub$1 = hub.getCurrentHub();",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      const parentSpan = scope.getSpan();",
                  "",
                  "      const shouldSkipSpan = context.onlyIfParent && !parentSpan;",
                  "      const activeSpan = shouldSkipSpan"
                ],
                "pre_context": [
                  " * or you didn't set `tracesSampleRate`, this function will not generate spans",
                  " * and the `span` returned from the callback will be undefined.",
                  " */",
                  "function startSpan(context, callback) {",
                  "  const spanContext = normalizeContext(context);",
                  "",
                  "  return hub.runWithAsyncContext(() => {"
                ]
              },
              {
                "colno": 20,
                "context_line": "      return hub$1.withScope(callback);",
                "filename": "[[FILENAME3]]",
                "function": "Object.withScope",
                "in_app": false,
                "lineno": 177,
                "module": "@sentry.core.cjs:exports",
                "post_context": [
                  "    }",
                  "",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    return hub$1.withScope(() => {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      hub$1.getStackTop().scope = scope ;",
                  "      return callback(scope );"
                ],
                "pre_context": [
                  "  const hub$1 = hub.getCurrentHub();",
                  "",
                  "  // If a scope is defined, we want to make this the active scope instead of the default one",
                  "  if (rest.length === 2) {",
                  "    const [scope, callback] = rest;",
                  "    if (!scope) {",
                  "      // eslint-disable-next-line deprecation/deprecation"
                ]
              },
              {
                "colno": 28,
                "context_line": "      maybePromiseResult = callback(scope);",
                "filename": "[[FILENAME6]]",
                "function": "Hub.withScope",
                "in_app": false,
                "lineno": 194,
                "module": "@sentry.core.cjs:hub",
                "post_context": [
                  "    } catch (e) {",
                  "      // eslint-disable-next-line deprecation/deprecation",
                  "      this.popScope();",
                  "      throw e;",
                  "    }",
                  "",
                  "    if (utils.isThenable(maybePromiseResult)) {"
                ],
                "pre_context": [
                  "   */",
                  "   withScope(callback) {",
                  "    // eslint-disable-next-line deprecation/deprecation",
                  "    const scope = this.pushScope();",
                  "",
                  "    let maybePromiseResult;",
                  "    try {"
                ]
              },
              {
                "colno": 35,
                "context_line": "      return handleCallbackErrors.handleCallbackErrors(",
                "filename": "[[FILENAME5]]",
                "function": "<anonymous>",
                "in_app": false,
                "lineno": 99,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => callback(activeSpan),",
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');"
                ],
                "pre_context": [
                  "        : createChildSpanOrTransaction(hub$1, {",
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  ""
                ]
              },
              {
                "colno": 26,
                "context_line": "    maybePromiseResult = fn();",
                "filename": "[[FILENAME7]]",
                "function": "Object.handleCallbackErrors",
                "in_app": false,
                "lineno": 26,
                "module": "@sentry.core.cjs.utils:handleCallbackErrors",
                "post_context": [
                  "  } catch (e) {",
                  "    onError(e);",
                  "    onFinally();",
                  "    throw e;",
                  "  }",
                  "",
                  "  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);"
                ],
                "pre_context": [
                  "  fn,",
                  "  onError,",
                  "  // eslint-disable-next-line @typescript-eslint/no-empty-function",
                  "  onFinally = () => {},",
                  ") {",
                  "  let maybePromiseResult;",
                  "  try {"
                ]
              },
              {
                "colno": 15,
                "context_line": "        () => callback(activeSpan),",
                "filename": "[[FILENAME5]]",
                "function": "handleCallbackErrors.handleCallbackErrors.status.status",
                "in_app": false,
                "lineno": 100,
                "module": "@sentry.core.cjs.tracing:trace",
                "post_context": [
                  "        () => {",
                  "          // Only update the span status if it hasn't been changed yet",
                  "          if (activeSpan) {",
                  "            const { status } = spanUtils.spanToJSON(activeSpan);",
                  "            if (!status || status === 'ok') {",
                  "              activeSpan.setStatus('internal_error');",
                  "            }"
                ],
                "pre_context": [
                  "            parentSpan,",
                  "            spanContext,",
                  "            forceTransaction: context.forceTransaction,",
                  "            scope,",
                  "          });",
                  "",
                  "      return handleCallbackErrors.handleCallbackErrors("
                ]
              },
              {
                "colno": 74,
                "filename": "[[FILENAME8]]",
                "function": "eval",
                "in_app": false,
                "lineno": 29,
                "module": "route.ts"
              }
            ]
          },
          "type": "Error",
          "value": "This is an error"
        }
      ]
    },
    "modules": {
      "ansi-styles": "4.3.0",
      "balanced-match": "1.0.2",
      "brace-expansion": "2.0.1",
      "caniuse-lite": "1.0.30001610",
      "commondir": "1.0.1",
      "estree-walker": "2.0.2",
      "fs.realpath": "1.0.0",
      "function-bind": "1.1.2",
      "has-flag": "4.0.0",
      "hasown": "2.0.2",
      "inflight": "1.0.6",
      "inherits": "2.0.4",
      "is-core-module": "2.13.1",
      "is-reference": "1.2.1",
      "js-tokens": "4.0.0",
      "localforage": "1.10.0",
      "loose-envify": "1.4.0",
      "nanoid": "3.3.7",
      "next": "13.2.0",
      "once": "1.4.0",
      "picocolors": "1.0.0",
      "picomatch": "2.3.1",
      "postcss": "8.4.14",
      "react": "18.2.0",
      "react-dom": "18.2.0",
      "resolve": "1.22.8",
      "rollup": "2.78.0",
      "scheduler": "0.23.0",
      "source-map-js": "1.2.0",
      "stacktrace-parser": "0.1.10",
      "styled-jsx": "5.1.1",
      "wrappy": "1.0.2"
    },
    "platform": "node",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "*/*",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "baggage": "sentry-environment=qa,sentry-public_key=3b6c388182fb435097f41d181be2b2ba,sentry-trace_id=1e639b3a12f042eb99339c3baac20ffa",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "host": "localhost:3030",
        "pragma": "no-cache",
        "referer": "http://localhost:3030/test-route-handlers",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "sentry-trace": "1e639b3a12f042eb99339c3baac20ffa-84813d02de47733d",
        "user-agent": "[[user-agent]]"
      },
      "url": "http://localhost:3030"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Undici",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariables",
        "Context",
        "Modules",
        "RewriteFrames",
        "Http",
        "OnUncaughtException"
      ],
      "name": "sentry.javascript.nextjs",
      "packages": [
        {
          "name": "npm:@sentry/nextjs",
          "version": "7.110.1"
        },
        {
          "name": "npm:@sentry/node",
          "version": "7.110.1"
        }
      ],
      "version": "7.110.1"
    },
    "server_name": "D9M3PY4LQ7.local",
    "tags": {
      "runtime": "node",
      "transaction": "GET /api/test-error-manual"
    },
    "timestamp": "[[timestamp]]",
    "transaction": " "
  }
]
