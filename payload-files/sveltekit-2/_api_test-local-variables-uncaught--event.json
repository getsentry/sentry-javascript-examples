[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.sveltekit",
      "version": "8.0.0-beta.3"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "release": "016d073b9f5b47ef8e2d2cff020115bb",
      "trace_id": "[[ID2]]"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "  \u001b[32m➜\u001b[39m  \u001b[1mLocal\u001b[22m:   \u001b[36mhttp://localhost:\u001b[1m4173\u001b[22m/\u001b[39m",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[2m  \u001b[32m➜\u001b[39m  \u001b[1mNetwork\u001b[22m\u001b[2m: use \u001b[22m\u001b[1m--host\u001b[22m\u001b[2m to expose\u001b[22m",
        "timestamp": "[[timestamp]]"
      },
      {
        "category": "console",
        "level": "log",
        "message": "\u001b[2m\u001b[32m  ➜\u001b[39m\u001b[22m\u001b[2m  press \u001b[22m\u001b[1mh + enter\u001b[22m\u001b[2m to show help\u001b[22m",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "parent_span_id": "[[ID3]]",
        "span_id": "[[ID4]]",
        "trace_id": "[[ID2]]"
      }
    },
    "debug_meta": {
      "images": [
        {
          "code_file": "app:///index.js",
          "debug_id": "[[ID5]]",
          "type": "sourcemap"
        },
        {
          "code_file": "app:///_server.ts.js",
          "debug_id": "[[ID6]]",
          "type": "sourcemap"
        }
      ]
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": false,
            "type": "sveltekit"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 5,
                "context_line": "\t\t\t\tawait server.respond(request, {",
                "filename": "[[FILENAME1]]",
                "function": "?",
                "in_app": false,
                "lineno": 190,
                "post_context": [
                  "\t\t\t\t\tgetClientAddress: () => {",
                  "\t\t\t\t\t\tconst { remoteAddress } = req.socket;",
                  "\t\t\t\t\t\tif (remoteAddress) return remoteAddress;",
                  "\t\t\t\t\t\tthrow new Error('Could not determine clientAddress');",
                  "\t\t\t\t\t},",
                  "\t\t\t\t\tread: (file) => fs.readFileSync(join(svelte_config.kit.files.assets, file)),",
                  "\t\t\t\t\temulator"
                ],
                "pre_context": [
                  "\t\t\tconst request = await getRequest({",
                  "\t\t\t\tbase: `${protocol}://${host}`,",
                  "\t\t\t\trequest: req",
                  "\t\t\t});",
                  "",
                  "\t\t\tsetResponse(",
                  "\t\t\t\tres,"
                ]
              },
              {
                "colno": 22,
                "context_line": "    const response = await options2.hooks.handle({",
                "filename": "[[FILENAME1]]",
                "function": "respond",
                "in_app": true,
                "lineno": "[[highNumber]]",
                "post_context": [
                  "      event,",
                  "      resolve: (event2, opts) => resolve2(event2, opts).then((response2) => {",
                  "        for (const key2 in headers2) {",
                  "          const value = headers2[key2];",
                  "          response2.headers.set(",
                  "            key2,",
                  "            /** @type {string} */"
                ],
                "pre_context": [
                  "      manifest,",
                  "      state,",
                  "      get_cookie_header,",
                  "      set_internal",
                  "    });",
                  "    if (state.prerendering && !state.prerendering.fallback)",
                  "      disable_search(url);"
                ]
              },
              {
                "colno": 27,
                "context_line": "    const resolveResult = await core.startSpan(",
                "filename": "[[FILENAME2]]",
                "function": "instrumentHandle",
                "in_app": false,
                "lineno": 154,
                "post_context": [
                  "      {",
                  "        op: 'http.server',",
                  "        attributes: {",
                  "          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.sveltekit',",
                  "          [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: _optionalChain([event, 'access', _5 => _5.route, 'optionalAccess', _6 => _6.id]) ? 'route' : 'url',",
                  "          'http.method': event.request.method,",
                  "        },"
                ],
                "pre_context": [
                  "  if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {",
                  "    core.getIsolationScope().setTransactionName(routeName);",
                  "  } else {",
                  "    debugBuild.DEBUG_BUILD && utils$1.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');",
                  "  }",
                  "",
                  "  try {"
                ]
              },
              {
                "colno": 21,
                "context_line": "        const res = await resolve(event, {",
                "filename": "[[FILENAME2]]",
                "function": "?",
                "in_app": false,
                "lineno": 165,
                "post_context": [
                  "          transformPageChunk: addSentryCodeToPage(options),",
                  "        });",
                  "        if (span) {",
                  "          core.setHttpStatus(span, res.status);",
                  "        }",
                  "        return res;",
                  "      },"
                ],
                "pre_context": [
                  "          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.sveltekit',",
                  "          [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: _optionalChain([event, 'access', _5 => _5.route, 'optionalAccess', _6 => _6.id]) ? 'route' : 'url',",
                  "          'http.method': event.request.method,",
                  "        },",
                  "        name: routeName,",
                  "      },",
                  "      async (span) => {"
                ]
              },
              {
                "colno": 5,
                "filename": "[[FILENAME3]]",
                "function": "process.processTicksAndRejections",
                "in_app": false,
                "lineno": 95
              },
              {
                "colno": 28,
                "context_line": "          response = await render_endpoint(event2, await route.endpoint(), state);",
                "filename": "[[FILENAME1]]",
                "function": "resolve2",
                "in_app": true,
                "lineno": "[[highNumber]]",
                "post_context": [
                  "        } else if (route.page) {",
                  "          if (page_methods.has(method)) {",
                  "            response = await render_page(event2, route.page, options2, manifest, state, resolve_opts);",
                  "          } else {",
                  "            const allowed_methods2 = new Set(allowed_page_methods);",
                  "            const node = await manifest._.nodes[route.page.leaf]();",
                  "            if (node?.server?.actions) {"
                ],
                "pre_context": [
                  "            options2,",
                  "            manifest,",
                  "            state,",
                  "            invalidated_data_nodes,",
                  "            trailing_slash ?? \"never\"",
                  "          );",
                  "        } else if (route.endpoint && (!route.page || is_endpoint_request(event2))) {"
                ]
              },
              {
                "colno": 26,
                "context_line": "    let response = await handler(",
                "filename": "[[FILENAME1]]",
                "function": "render_endpoint",
                "in_app": true,
                "lineno": 272,
                "post_context": [
                  "      /** @type {import('@sveltejs/kit').RequestEvent<Record<string, any>>} */",
                  "      event",
                  "    );",
                  "    if (!(response instanceof Response)) {",
                  "      throw new Error(",
                  "        `Invalid response from route ${event.url.pathname}: handler should return a Response object`",
                  "      );"
                ],
                "pre_context": [
                  "    if (state.depth > 0) {",
                  "      throw new Error(`${event.route.id} is not prerenderable`);",
                  "    } else {",
                  "      return new Response(void 0, { status: 204 });",
                  "    }",
                  "  }",
                  "  try {"
                ]
              },
              {
                "colno": 9,
                "context_line": "  throw new Error(`Uncaught Local Variable Error - ${JSON.stringify({ randomVariableToRecord })}`);",
                "filename": "[[FILENAME4]]",
                "function": "GET",
                "in_app": true,
                "lineno": 12,
                "post_context": [
                  "};",
                  "export {",
                  "  GET",
                  "};",
                  ""
                ],
                "pre_context": [
                  "    n && (e._sentryDebugIds = e._sentryDebugIds || {}, e._sentryDebugIds[n] = \"02a5352c-480c-42a3-9ce8-e4038598cf48\", e._sentryDebugIdIdenti {snip}",
                  "  } catch (e2) {",
                  "  }",
                  "}();",
                  "import \"../../../../chunks/_sentry-release-injection-file.js\";",
                  "const GET = () => {",
                  "  const randomVariableToRecord = \"LOCAL_VARIABLE\";"
                ]
              }
            ]
          },
          "type": "Error",
          "value": "Uncaught Local Variable Error - {\"randomVariableToRecord\":\"LOCAL_VARIABLE\"}"
        }
      ]
    },
    "modules": {},
    "platform": "node",
    "release": "769bfcd7ef414979b49e11a65ea1802c",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "*/*",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "baggage": "sentry-environment=qa,sentry-release=016d073b9f5b47ef8e2d2cff020115bb,sentry-public_key=3b6c388182fb435097f41d181be2b2ba,sentry-trace_id=91547693adbd4206ad8e99a0f0f9b6b8",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "host": "localhost:4173",
        "pragma": "no-cache",
        "referer": "http://localhost:4173/test-route-handlers",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "sentry-trace": "91547693adbd4206ad8e99a0f0f9b6b8-95323cad6cbd9e51",
        "user-agent": "[[user-agent]]"
      },
      "method": "GET",
      "url": "http://localhost:4173/api/test-local-variables-uncaught"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariablesAsync",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa",
        "Connect",
        "RewriteFrames"
      ],
      "name": "sentry.javascript.sveltekit",
      "packages": [
        {
          "name": "npm:@sentry/sveltekit",
          "version": "8.0.0-beta.3"
        },
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-beta.3"
        }
      ],
      "version": "8.0.0-beta.3"
    },
    "server_name": "D9M3PY4LQ7.local",
    "tags": {
      "runtime": "node"
    },
    "timestamp": "[[timestamp]]",
    "transaction": "GET /api/test-local-variables-uncaught"
  }
]