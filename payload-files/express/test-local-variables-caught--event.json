[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "8.0.0-beta.3"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "sample_rate": "1",
      "sampled": "true",
      "trace_id": "[[ID2]]",
      "transaction": "GET /test-local-variables-caught"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "Example app listening on port 3030",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23D56",
        "kernel_version": "23.3.0",
        "name": "macOS",
        "version": "14.3"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "span_id": "[[ID3]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": true,
            "type": "generic"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 12,
                "context_line": "    return next();",
                "filename": "[[FILENAME1]]",
                "function": "Layer.handle [as handle_request]",
                "in_app": false,
                "lineno": 91,
                "module": "express.lib.router:layer",
                "post_context": [
                  "  }",
                  "",
                  "  try {",
                  "    fn(req, res, next);",
                  "  } catch (err) {",
                  "    next(err);",
                  "  }"
                ],
                "pre_context": [
                  " */",
                  "",
                  "Layer.prototype.handle_request = function handle(req, res, next) {",
                  "  var fn = this.handle;",
                  "",
                  "  if (fn.length > 3) {",
                  "    // not a standard request handler"
                ]
              },
              {
                "colno": 10,
                "context_line": "    self.process_params(layer, paramcalled, req, res, function (err) {",
                "filename": "[[FILENAME2]]",
                "function": "next",
                "in_app": false,
                "lineno": 280,
                "module": "express.lib.router:index",
                "post_context": [
                  "      if (err) {",
                  "        next(layerError || err)",
                  "      } else if (route) {",
                  "        layer.handle_request(req, res, next)",
                  "      } else {",
                  "        trim_prefix(layer, layerError, layerPath, path)",
                  "      }"
                ],
                "pre_context": [
                  "    // Capture one-time layer values",
                  "    req.params = self.mergeParams",
                  "      ? mergeParams(layer.params, parentParams)",
                  "      : layer.params;",
                  "    var layerPath = layer.path;",
                  "",
                  "    // this should be done for the layer"
                ]
              },
              {
                "colno": 12,
                "context_line": "    return done();",
                "filename": "[[FILENAME2]]",
                "function": "Function.process_params",
                "in_app": false,
                "lineno": 346,
                "module": "express.lib.router:index",
                "post_context": [
                  "  }",
                  "",
                  "  var i = 0;",
                  "  var name;",
                  "  var paramIndex = 0;",
                  "  var key;",
                  "  var paramVal;"
                ],
                "pre_context": [
                  "  var params = this.params;",
                  "",
                  "  // captured parameters from the layer, keys and values",
                  "  var keys = layer.keys;",
                  "",
                  "  // fast track",
                  "  if (!keys || keys.length === 0) {"
                ]
              },
              {
                "colno": 15,
                "context_line": "        layer.handle_request(req, res, next)",
                "filename": "[[FILENAME2]]",
                "function": "?",
                "in_app": false,
                "lineno": 284,
                "module": "express.lib.router:index",
                "post_context": [
                  "      } else {",
                  "        trim_prefix(layer, layerError, layerPath, path)",
                  "      }",
                  "",
                  "      sync = 0",
                  "    });",
                  "  }"
                ],
                "pre_context": [
                  "    var layerPath = layer.path;",
                  "",
                  "    // this should be done for the layer",
                  "    self.process_params(layer, paramcalled, req, res, function (err) {",
                  "      if (err) {",
                  "        next(layerError || err)",
                  "      } else if (route) {"
                ]
              },
              {
                "colno": 5,
                "context_line": "    fn(req, res, next);",
                "filename": "[[FILENAME1]]",
                "function": "Layer.handle [as handle_request]",
                "in_app": false,
                "lineno": 95,
                "module": "express.lib.router:layer",
                "post_context": [
                  "  } catch (err) {",
                  "    next(err);",
                  "  }",
                  "};",
                  "",
                  "/**",
                  " * Check if this route matches `path`, if so"
                ],
                "pre_context": [
                  "",
                  "  if (fn.length > 3) {",
                  "    // not a standard request handler",
                  "    return next();",
                  "  }",
                  "",
                  "  try {"
                ]
              },
              {
                "colno": 37,
                "context_line": "                    return original.apply(this, arguments);",
                "filename": "[[FILENAME3]]",
                "function": "?",
                "in_app": false,
                "lineno": 214,
                "module": "@opentelemetry.instrumentation-express.build.src:instrumentation",
                "post_context": [
                  "                }",
                  "                catch (anyError) {",
                  "                    const [error, message] = (0, utils_1.asErrorAndMessage)(anyError);",
                  "                    span.recordException(error);",
                  "                    span.setStatus({",
                  "                        code: api_1.SpanStatusCode.ERROR,",
                  "                        message,"
                ],
                "pre_context": [
                  "                            req[internal_types_1._LAYERS_STORE_PROPERTY].pop();",
                  "                        }",
                  "                        const callback = args[callbackIdx];",
                  "                        return callback.apply(this, arguments);",
                  "                    };",
                  "                }",
                  "                try {"
                ]
              },
              {
                "colno": 3,
                "context_line": "  next();",
                "filename": "[[FILENAME4]]",
                "function": "Route.dispatch",
                "in_app": false,
                "lineno": 119,
                "module": "express.lib.router:route",
                "post_context": [
                  "",
                  "  function next(err) {",
                  "    // signal to exit route",
                  "    if (err && err === 'route') {",
                  "      return done();",
                  "    }",
                  ""
                ],
                "pre_context": [
                  "",
                  "  if (method === 'head' && !this.methods['head']) {",
                  "    method = 'get';",
                  "  }",
                  "",
                  "  req.route = this;",
                  ""
                ]
              },
              {
                "colno": 13,
                "context_line": "      layer.handle_request(req, res, next);",
                "filename": "[[FILENAME4]]",
                "function": "next",
                "in_app": false,
                "lineno": 149,
                "module": "express.lib.router:route",
                "post_context": [
                  "    }",
                  "",
                  "    sync = 0",
                  "  }",
                  "};",
                  "",
                  "/**"
                ],
                "pre_context": [
                  "    }",
                  "",
                  "    if (layer.method && layer.method !== method) {",
                  "      next(err)",
                  "    } else if (err) {",
                  "      layer.handle_error(err, req, res, next);",
                  "    } else {"
                ]
              },
              {
                "colno": 5,
                "context_line": "    fn(req, res, next);",
                "filename": "[[FILENAME1]]",
                "function": "Layer.handle [as handle_request]",
                "in_app": false,
                "lineno": 95,
                "module": "express.lib.router:layer",
                "post_context": [
                  "  } catch (err) {",
                  "    next(err);",
                  "  }",
                  "};",
                  "",
                  "/**",
                  " * Check if this route matches `path`, if so"
                ],
                "pre_context": [
                  "",
                  "  if (fn.length > 3) {",
                  "    // not a standard request handler",
                  "    return next();",
                  "  }",
                  "",
                  "  try {"
                ]
              },
              {
                "colno": 15,
                "context_line": "        throw new Error('Local Variable Error');",
                "filename": "[[FILENAME5]]",
                "function": "?",
                "in_app": true,
                "lineno": 166,
                "module": "app",
                "post_context": [
                  "    }",
                  "    catch (e) {",
                  "        exceptionId = Sentry.captureException(e);",
                  "    }",
                  "    res.send({ exceptionId: exceptionId, randomVariableToRecord: randomVariableToRecord });",
                  "});",
                  "// @ts-ignore"
                ],
                "pre_context": [
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "    throw new Error(\"Uncaught Local Variable Error - \".concat(JSON.stringify({ randomVariableToRecord: randomVariableToRecord })));",
                  "});",
                  "app.get('/test-local-variables-caught', function (req, res) {",
                  "    var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "    var exceptionId;",
                  "    try {"
                ],
                "vars": {
                  "exceptionId": "<undefined>",
                  "randomVariableToRecord": "LOCAL VARIABLE",
                  "req": "<IncomingMessage>",
                  "res": "<ServerResponse>"
                }
              }
            ]
          },
          "type": "Error",
          "value": "Local Variable Error"
        }
      ]
    },
    "modules": {
      "accepts": "1.3.8",
      "array-flatten": "1.1.1",
      "body-parser": "1.20.2",
      "bytes": "3.1.2",
      "call-bind": "1.0.7",
      "content-disposition": "0.5.4",
      "content-type": "1.0.5",
      "cookie": "0.6.0",
      "cookie-signature": "1.0.6",
      "debug": "4.3.4",
      "define-data-property": "1.1.4",
      "depd": "2.0.0",
      "destroy": "1.2.0",
      "dotenv": "16.4.5",
      "ee-first": "1.1.1",
      "encodeurl": "1.0.2",
      "es-define-property": "1.0.0",
      "es-errors": "1.3.0",
      "escape-html": "1.0.3",
      "etag": "1.8.1",
      "express": "4.19.2",
      "finalhandler": "1.2.0",
      "forwarded": "0.2.0",
      "fresh": "0.5.2",
      "function-bind": "1.1.2",
      "get-intrinsic": "1.2.4",
      "gopd": "1.0.1",
      "has-property-descriptors": "1.0.2",
      "has-proto": "1.0.3",
      "has-symbols": "1.0.3",
      "hasown": "2.0.2",
      "http-errors": "2.0.0",
      "iconv-lite": "0.4.24",
      "import-in-the-middle": "1.7.1",
      "inherits": "2.0.4",
      "ipaddr.js": "1.9.1",
      "is-core-module": "2.13.1",
      "media-typer": "0.3.0",
      "merge-descriptors": "1.0.1",
      "methods": "1.1.2",
      "mime": "1.6.0",
      "mime-db": "1.52.0",
      "mime-types": "2.1.35",
      "module-details-from-path": "1.0.3",
      "ms": "2.1.3",
      "negotiator": "0.6.3",
      "object-inspect": "1.13.1",
      "on-finished": "2.4.1",
      "opentelemetry-instrumentation-fetch-node": "1.2.0",
      "parseurl": "1.3.3",
      "path-to-regexp": "0.1.7",
      "proxy-addr": "2.0.7",
      "qs": "6.11.0",
      "range-parser": "1.2.1",
      "raw-body": "2.5.2",
      "require-in-the-middle": "7.3.0",
      "resolve": "1.22.8",
      "safe-buffer": "5.2.1",
      "safer-buffer": "2.1.2",
      "semver": "7.6.0",
      "send": "0.18.0",
      "serve-static": "1.15.0",
      "set-function-length": "1.2.2",
      "setprototypeof": "1.2.0",
      "shimmer": "1.2.1",
      "side-channel": "1.0.6",
      "statuses": "2.0.1",
      "supports-color": "5.5.0",
      "toidentifier": "1.0.1",
      "type-is": "1.6.18",
      "unpipe": "1.0.0",
      "utils-merge": "1.0.1",
      "vary": "1.1.2",
      "yallist": "4.0.0"
    },
    "platform": "node",
    "request": {
      "cookies": {
        "sc": "2pGHpwfeQfLDqPcR9gwpxKl0DHTlOKYq"
      },
      "headers": {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "en-GB,en-US;q=0.9,en;q=0.8,de;q=0.7",
        "connection": "keep-alive",
        "cookie": "sc=2pGHpwfeQfLDqPcR9gwpxKl0DHTlOKYq",
        "host": "localhost:3030",
        "if-none-match": "[[W/entityTagValue]]",
        "sec-ch-ua": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"",
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "\"macOS\"",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "[[user-agent]]"
      },
      "method": "GET",
      "url": "http://localhost:3030/test-local-variables-caught"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariablesAsync",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa",
        "Connect"
      ],
      "name": "sentry.javascript.node",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-beta.3"
        }
      ],
      "version": "8.0.0-beta.3"
    },
    "server_name": "JH0G94X29Q.local",
    "timestamp": "[[timestamp]]",
    "transaction": "GET /test-local-variables-caught"
  }
]