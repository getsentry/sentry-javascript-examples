[
  {
    "dsn": "[[dsn]]",
    "event_id": "[[ID1]]",
    "sdk": {
      "name": "sentry.javascript.node",
      "version": "8.0.0-rc.1"
    },
    "sent_at": "[[ISODateString]]",
    "trace": {
      "environment": "qa",
      "public_key": "[[publicKey]]",
      "sample_rate": "1",
      "sampled": "true",
      "trace_id": "[[ID2]]",
      "transaction": "GET /test-local-variables-caught"
    }
  },
  {
    "type": "event"
  },
  {
    "breadcrumbs": [
      {
        "category": "console",
        "level": "log",
        "message": "Server running on http://localhost:3030",
        "timestamp": "[[timestamp]]"
      }
    ],
    "contexts": {
      "app": {
        "app_memory": "[[highNumber]]",
        "app_start_time": "[[ISODateString]]"
      },
      "cloud_resource": {},
      "culture": {
        "locale": "en-US",
        "timezone": "Europe/Vienna"
      },
      "device": {
        "arch": "arm64",
        "boot_time": "[[ISODateString]]",
        "cpu_description": "Apple M1 Pro",
        "free_memory": "[[highNumber]]",
        "memory_size": "[[highNumber]]",
        "processor_count": 10,
        "processor_frequency": "[[highNumber]]"
      },
      "os": {
        "build": "23C64",
        "kernel_version": "23.2.0",
        "name": "macOS",
        "version": "14.2"
      },
      "runtime": {
        "name": "node",
        "version": "v20.12.1"
      },
      "trace": {
        "parent_span_id": "[[ID3]]",
        "span_id": "[[ID4]]",
        "trace_id": "[[ID2]]"
      }
    },
    "environment": "qa",
    "event_id": "[[ID1]]",
    "exception": {
      "values": [
        {
          "mechanism": {
            "handled": true,
            "type": "generic"
          },
          "stacktrace": {
            "frames": [
              {
                "colno": 36,
                "context_line": "    const result = await internals.handler(request, request.route.settings.handler);",
                "filename": "[[FILENAME1]]",
                "function": "exports.execute",
                "in_app": false,
                "lineno": 31,
                "module": "@hapi.hapi.lib:handler",
                "post_context": [
                  "    if (result._takeover ||",
                  "        typeof result === 'symbol') {",
                  "",
                  "        return result;",
                  "    }",
                  "",
                  "    request._setResponse(result);"
                ],
                "pre_context": [
                  "                }",
                  "            }",
                  "        }",
                  "    }",
                  "",
                  "    // Handler",
                  ""
                ]
              },
              {
                "colno": 48,
                "context_line": "    let response = await request._core.toolkit.execute(method, request, { bind, realm, continue: 'null' });",
                "filename": "[[FILENAME1]]",
                "function": "internals.handler",
                "in_app": false,
                "lineno": 46,
                "module": "@hapi.hapi.lib:handler",
                "post_context": [
                  "",
                  "    // Handler",
                  "",
                  "    if (!pre) {",
                  "        if (response.isBoom) {",
                  "            request._log(['handler', 'error'], response);",
                  "            throw response;"
                ],
                "pre_context": [
                  "};",
                  "",
                  "",
                  "internals.handler = async function (request, method, pre) {",
                  "",
                  "    const bind = request.route.settings.bind;",
                  "    const realm = request.route.realm;"
                ]
              },
              {
                "colno": 29,
                "context_line": "                operation = method(request, h);",
                "filename": "[[FILENAME2]]",
                "function": "exports.Manager.execute",
                "in_app": false,
                "lineno": 57,
                "module": "@hapi.hapi.lib:toolkit",
                "post_context": [
                  "            }",
                  "",
                  "            var response = await exports.timed(operation, options);",
                  "        }",
                  "        catch (err) {",
                  "            if (Bounce.isSystem(err)) {",
                  "                response = Boom.badImplementation(err);"
                ],
                "pre_context": [
                  "            if (bind) {",
                  "                operation = method.call(bind, request, h);",
                  "            }",
                  "            else if (options.args) {",
                  "                operation = method(request, h, ...options.args);",
                  "            }",
                  "            else {"
                ]
              },
              {
                "colno": 50,
                "context_line": "                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));",
                "filename": "[[FILENAME3]]",
                "function": "?",
                "in_app": false,
                "lineno": 266,
                "module": "@opentelemetry.instrumentation-hapi.build.src:instrumentation",
                "post_context": [
                  "                }",
                  "                catch (err) {",
                  "                    span.recordException(err);",
                  "                    span.setStatus({",
                  "                        code: api.SpanStatusCode.ERROR,",
                  "                        message: err.message,",
                  "                    });"
                ],
                "pre_context": [
                  "                    rpcMetadata.route = route.path;",
                  "                }",
                  "                const metadata = (0, utils_1.getRouteMetadata)(route, pluginName);",
                  "                const span = instrumentation.tracer.startSpan(metadata.name, {",
                  "                    attributes: metadata.attributes,",
                  "                });",
                  "                try {"
                ]
              },
              {
                "colno": 46,
                "context_line": "        return this._getContextManager().with(context, fn, thisArg, ...args);",
                "filename": "[[FILENAME4]]",
                "function": "ContextAPI.with",
                "in_app": false,
                "lineno": 60,
                "module": "@opentelemetry.api.build.src.api:context",
                "post_context": [
                  "    }",
                  "    /**",
                  "     * Bind a context to a target function or event emitter",
                  "     *",
                  "     * @param context context to bind to the event emitter or function. Defaults to the currently active context",
                  "     * @param target function or event emitter to bind",
                  "     */"
                ],
                "pre_context": [
                  "     *",
                  "     * @param context context to be active during function execution",
                  "     * @param fn function to execute in a context",
                  "     * @param thisArg optional receiver to be used for calling fn",
                  "     * @param args optional arguments forwarded to fn",
                  "     */",
                  "    with(context, fn, thisArg, ...args) {"
                ]
              },
              {
                "colno": 24,
                "context_line": "      return super.with(ctx2, fn, thisArg, ...args);",
                "filename": "[[FILENAME5]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": "[[highNumber]]",
                "module": "@sentry.opentelemetry.cjs:index",
                "post_context": [
                  "    }",
                  "  }",
                  "",
                  "  return SentryContextManager ;",
                  "}",
                  "",
                  "/** If this attribute is true, it means that the parent is a remote span. */"
                ],
                "pre_context": [
                  "      const ctx2 = ctx1",
                  "        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)",
                  "        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)",
                  "        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);",
                  "",
                  "      setContextOnScope(newCurrentScope, ctx2);",
                  ""
                ]
              },
              {
                "colno": 40,
                "context_line": "        return this._asyncLocalStorage.run(context, cb, ...args);",
                "filename": "[[FILENAME6]]",
                "function": "SentryContextManager.with",
                "in_app": false,
                "lineno": 33,
                "module": "@opentelemetry.context-async-hooks.build.src:AsyncLocalStorageContextManager",
                "post_context": [
                  "    }",
                  "    enable() {",
                  "        return this;",
                  "    }",
                  "    disable() {",
                  "        this._asyncLocalStorage.disable();",
                  "        return this;"
                ],
                "pre_context": [
                  "    }",
                  "    active() {",
                  "        var _a;",
                  "        return (_a = this._asyncLocalStorage.getStore()) !== null && _a !== void 0 ? _a : api_1.ROOT_CONTEXT;",
                  "    }",
                  "    with(context, fn, thisArg, ...args) {",
                  "        const cb = thisArg == null ? fn : fn.bind(thisArg);"
                ]
              },
              {
                "colno": 14,
                "filename": "[[FILENAME7]]",
                "function": "AsyncLocalStorage.run",
                "in_app": false,
                "lineno": 346,
                "module": "node:async_hooks"
              },
              {
                "colno": 115,
                "context_line": "                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));",
                "filename": "[[FILENAME3]]",
                "function": "?",
                "in_app": false,
                "lineno": 266,
                "module": "@opentelemetry.instrumentation-hapi.build.src:instrumentation",
                "post_context": [
                  "                }",
                  "                catch (err) {",
                  "                    span.recordException(err);",
                  "                    span.setStatus({",
                  "                        code: api.SpanStatusCode.ERROR,",
                  "                        message: err.message,",
                  "                    });"
                ],
                "pre_context": [
                  "                    rpcMetadata.route = route.path;",
                  "                }",
                  "                const metadata = (0, utils_1.getRouteMetadata)(route, pluginName);",
                  "                const span = instrumentation.tracer.startSpan(metadata.name, {",
                  "                    attributes: metadata.attributes,",
                  "                });",
                  "                try {"
                ]
              },
              {
                "colno": 35,
                "context_line": "                            throw new Error('Local Variable Error');",
                "filename": "[[FILENAME8]]",
                "function": "handler",
                "in_app": true,
                "lineno": 211,
                "module": "app",
                "post_context": [
                  "                        }",
                  "                        catch (e) {",
                  "                            exceptionId = Sentry.captureException(e);",
                  "                        }",
                  "                        return { exceptionId: exceptionId };",
                  "                    },",
                  "                });"
                ],
                "pre_context": [
                  "                server.route({",
                  "                    method: 'GET',",
                  "                    path: '/test-local-variables-caught',",
                  "                    handler: function (request, h) {",
                  "                        var randomVariableToRecord = 'LOCAL VARIABLE';",
                  "                        var exceptionId;",
                  "                        try {"
                ]
              }
            ]
          },
          "type": "Error",
          "value": "Local Variable Error"
        }
      ]
    },
    "modules": {
      "debug": "4.3.4",
      "dotenv": "16.4.5",
      "function-bind": "1.1.2",
      "hasown": "2.0.2",
      "import-in-the-middle": "1.7.1",
      "is-core-module": "2.13.1",
      "mime-db": "1.52.0",
      "module-details-from-path": "1.0.3",
      "opentelemetry-instrumentation-fetch-node": "1.2.0",
      "require-in-the-middle": "7.3.0",
      "resolve": "1.22.8",
      "semver": "7.6.0",
      "shimmer": "1.2.1",
      "supports-color": "5.5.0",
      "yallist": "4.0.0"
    },
    "platform": "node",
    "request": {
      "cookies": {},
      "headers": {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.5",
        "cache-control": "no-cache",
        "connection": "keep-alive",
        "dnt": "1",
        "host": "localhost:3030",
        "pragma": "no-cache",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "none",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "[[user-agent]]"
      },
      "method": "GET",
      "url": "http://localhost:3030/test-local-variables-caught"
    },
    "sdk": {
      "integrations": [
        "InboundFilters",
        "FunctionToString",
        "LinkedErrors",
        "RequestData",
        "Console",
        "Http",
        "NodeFetch",
        "OnUncaughtException",
        "OnUnhandledRejection",
        "ContextLines",
        "LocalVariablesAsync",
        "Context",
        "Modules",
        "Express",
        "Fastify",
        "Graphql",
        "Mongo",
        "Mongoose",
        "Mysql",
        "Mysql2",
        "Redis",
        "Postgres",
        "Nest",
        "Hapi",
        "Koa",
        "Connect"
      ],
      "name": "sentry.javascript.node",
      "packages": [
        {
          "name": "npm:@sentry/node",
          "version": "8.0.0-rc.1"
        }
      ],
      "version": "8.0.0-rc.1"
    },
    "server_name": "D9M3PY4LQ7.local",
    "timestamp": "[[timestamp]]",
    "transaction": "GET /test-local-variables-caught"
  }
]